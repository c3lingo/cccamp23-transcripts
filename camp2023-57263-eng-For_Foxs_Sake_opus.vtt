WEBVTT

00:00:00.000 --> 00:00:10.000
 [MUSIC]

00:00:10.000 --> 00:00:17.000
 So next to me we have Ryan Hermans. So he is a security engineer at the University of

00:00:17.000 --> 00:00:42.900
 So, next to me we have Ryan Herrmans, so he is security engineer at Trinit.

00:00:42.900 --> 00:00:45.920
 I think you will give some introduction to yourself.

00:00:45.920 --> 00:00:53.040
 Right now it's about the Fox, for Fox sake, bypassing enterprise policy in Firefox.

00:00:53.040 --> 00:00:56.160
 So looking forward to your talk right now.

00:00:56.160 --> 00:00:59.160
 Thank you.

00:00:59.160 --> 00:01:07.480
 Hello, hello.

00:01:07.480 --> 00:01:09.160
 My name is Ryan.

00:01:09.160 --> 00:01:10.960
 Just a couple of things about me.

00:01:10.960 --> 00:01:14.040
 I work as a security engineer for Trinit Xenefits.

00:01:14.040 --> 00:01:19.640
 I'm very driven by curiosity, which I imagine most of you might be able to identify with.

00:01:19.640 --> 00:01:23.440
 My first introduction to cybersecurity was when my parents put a password on the family

00:01:23.440 --> 00:01:28.240
 computer which myself and my brother found intolerable.

00:01:28.240 --> 00:01:32.480
 I very much enjoy gelato and if you need to reach me at this event I'm available on matrix

00:01:32.480 --> 00:01:36.720
 at Orion.10 at Technics.de.

00:01:36.720 --> 00:01:41.940
 To jump right in, there was a bit of a problem at my company where there was enterprise policy

00:01:41.940 --> 00:01:46.720
 that was pushed to some of the computers without consulting the entire company and people's

00:01:46.720 --> 00:01:47.720
 work flows.

00:01:47.720 --> 00:01:51.680
 Some users had been disrupted by this and were somewhat irritable.

00:01:51.680 --> 00:01:55.800
 I kept hearing some discussion of circumventing the policy and as a security engineer it's

00:01:55.800 --> 00:01:59.080
 part of my job to make sure that the policy is enforced.

00:01:59.080 --> 00:02:04.520
 So I just asked myself the question, how easy would it be for a privileged user to bypass

00:02:04.520 --> 00:02:07.640
 this enterprise policy control?

00:02:07.640 --> 00:02:14.760
 The answer is if you have some level of administrative access, quite easy.

00:02:14.760 --> 00:02:17.120
 So I would like to temper your expectations.

00:02:17.120 --> 00:02:23.880
 This is not a crazy exploit or something that you can do without having some level of access,

00:02:23.880 --> 00:02:29.160
 root user or the ability to edit the applications directory.

00:02:29.160 --> 00:02:32.120
 Of course if you had root access you could do something much nastier to the system I'm

00:02:32.120 --> 00:02:34.400
 sure.

00:02:34.400 --> 00:02:39.440
 To start out, when our users, I don't know how well you could see that, but when our

00:02:39.440 --> 00:02:46.760
 users opened Firefox and opened the menu off to the right, they noticed something was missing,

00:02:46.760 --> 00:02:52.160
 the incognito or in private tabs option.

00:02:52.160 --> 00:02:58.000
 So first step, we go into Firefox into about colon policies to see and we see yes, the

00:02:58.000 --> 00:03:00.840
 enterprise policy service is active.

00:03:00.840 --> 00:03:05.800
 We see several things being imported as well as disabled private browsing is true.

00:03:05.800 --> 00:03:10.920
 So the first way we might be able to attack this is to look at the actual profile system

00:03:10.920 --> 00:03:13.800
 once being loaded onto the computer.

00:03:13.800 --> 00:03:16.760
 Mac OS profiles are similar to active directory.

00:03:16.760 --> 00:03:19.640
 It would be loaded using an MDM system.

00:03:19.640 --> 00:03:24.640
 The policy would be pushed to the host and then thereafter the policy would be served

00:03:24.640 --> 00:03:30.280
 using the profile service and the applications would query the service.

00:03:30.280 --> 00:03:35.960
 So we ask ourselves can we modify this profile that's actually installed on the machine?

00:03:35.960 --> 00:03:39.800
 So to start we open a root terminal and we run profiles list.

00:03:39.800 --> 00:03:43.680
 We see there are many, many profiles loaded on the machine, about 87 on this machine I

00:03:43.680 --> 00:03:46.360
 was testing on.

00:03:46.360 --> 00:03:51.120
 So then we take a closer look using profile show and to make our life easy we'll use grep

00:03:51.120 --> 00:03:52.880
 and grep for fox.

00:03:52.880 --> 00:03:54.340
 Ah, bingo.

00:03:54.340 --> 00:03:59.280
 We see a profile that is conveniently named Firefox incognito mode disable.

00:03:59.280 --> 00:04:03.200
 So this is our primary target.

00:04:03.200 --> 00:04:05.120
 You could try to unload them directly.

00:04:05.120 --> 00:04:11.200
 I went to the actual database and that's at var/db/configuration profiles and I said you

00:04:11.200 --> 00:04:15.120
 know just like active directory and editing the registry directly maybe I can just reach

00:04:15.120 --> 00:04:19.560
 into the database, change the values.

00:04:19.560 --> 00:04:23.400
 We take a look at this folder, we take a look at a detail and all of a sudden we have a

00:04:23.400 --> 00:04:25.960
 problem, operation not permitted.

00:04:25.960 --> 00:04:29.200
 So you might ask well I'm root, why is this operation not permitted?

00:04:29.200 --> 00:04:32.560
 We've run into something called system integrity protection.

00:04:32.560 --> 00:04:38.160
 It's a system on mac OS computers such that there's a user more powerful than the root

00:04:38.160 --> 00:04:41.240
 user and some things just simply cannot be tampered with.

00:04:41.240 --> 00:04:43.640
 So we're just going to call this a dead end.

00:04:43.640 --> 00:04:49.640
 But that's okay because at some point Firefox has to be loading the actual policy and then

00:04:49.640 --> 00:04:51.280
 it's outside of the realm of SIP.

00:04:51.280 --> 00:04:56.880
 So we look at Firefox and we say where does it load this policy?

00:04:56.880 --> 00:04:58.400
 And is it easily accessible?

00:04:58.400 --> 00:04:59.920
 Can we change it?

00:04:59.920 --> 00:05:03.040
 A lot of Firefox actually works through JavaScript modules.

00:05:03.040 --> 00:05:06.880
 Perhaps this functionality is contained within the JavaScript module that we can just directly

00:05:06.880 --> 00:05:08.720
 edit.

00:05:08.720 --> 00:05:13.440
 This introduces us to our second friend, the browser console with command shift J.

00:05:13.440 --> 00:05:18.400
 If we load that, we get to see everything happening inside Firefox.

00:05:18.400 --> 00:05:22.160
 And then our second friend about.config because we want to see much more information in the

00:05:22.160 --> 00:05:23.160
 console.

00:05:23.160 --> 00:05:25.120
 So we'll go to about colon config.

00:05:25.120 --> 00:05:34.160
 We get a nice scary warning that you say accept and then we punch in a new policy, browser.polices.loglevel,

00:05:34.160 --> 00:05:41.040
 click string, click add, type in debug to set our policy log level to debug and print more

00:05:41.040 --> 00:05:44.300
 information out for us.

00:05:44.300 --> 00:05:47.520
 Now when we go back to the browser console and reload Firefox, we see much, much more

00:05:47.520 --> 00:05:51.240
 information, everything that happens on startup.

00:05:51.240 --> 00:05:57.120
 And most importantly at the bottom, we see macOS policy parser.JSM.

00:05:57.120 --> 00:05:58.900
 And we see all the information it's loading.

00:05:58.900 --> 00:06:03.300
 So pretty quickly we've determined yes, this whole management of enterprise policies is

00:06:03.300 --> 00:06:08.440
 happening within one of these JavaScript modules.

00:06:08.440 --> 00:06:13.480
 Hopefully Firefox indicates for us an exact line number and gives us a link that we can

00:06:13.480 --> 00:06:16.840
 click to directly take us to the source code for Firefox.

00:06:16.840 --> 00:06:21.720
 And we immediately identify a function where it is parsing these policies, cleans them

00:06:21.720 --> 00:06:24.120
 up and then returns them.

00:06:24.120 --> 00:06:30.520
 And so that perhaps will give us a target to attack.

00:06:30.520 --> 00:06:34.860
 So for the actual bypass, we now know where Firefox is handling this policy.

00:06:34.860 --> 00:06:38.080
 We just don't know where it is in the file system.

00:06:38.080 --> 00:06:42.200
 And we don't know if we can update this module or if we can reload this module into Firefox

00:06:42.200 --> 00:06:44.540
 without it complaining.

00:06:44.540 --> 00:06:52.080
 So we open up a new root shell, we navigate to the applications Firefox app directory,

00:06:52.080 --> 00:06:53.560
 and then we run a find command.

00:06:53.560 --> 00:06:54.560
 We don't see anything.

00:06:54.560 --> 00:06:55.560
 That's fine.

00:06:55.560 --> 00:06:56.560
 Let's use grep.

00:06:56.560 --> 00:06:58.920
 Ah, all of a sudden we see a couple options.

00:06:58.920 --> 00:07:02.240
 It shows up in two files, both named omni.ja.

00:07:02.240 --> 00:07:04.900
 To keep this talk a little shorter, I'm just going to say that we're going to focus on

00:07:04.900 --> 00:07:08.360
 the very first one.

00:07:08.360 --> 00:07:14.460
 We can take this, copy it to attempt directory, and then unzip it.

00:07:14.460 --> 00:07:17.040
 And we see a ton of things roll out of that.

00:07:17.040 --> 00:07:19.120
 That's quite fine.

00:07:19.120 --> 00:07:22.860
 We're going to remove the original, clean up a little bit, and take a look in this directory.

00:07:22.860 --> 00:07:28.880
 And we see all sorts of extensions to Firefox, including a very interesting modules folder.

00:07:28.880 --> 00:07:32.320
 If we run that find command again, we're richly rewarded.

00:07:32.320 --> 00:07:39.020
 We see modules, policies, mac os policy parser.sys.mjs.

00:07:39.020 --> 00:07:43.960
 This will be what we will be trying to adjust.

00:07:43.960 --> 00:07:52.160
 So if we load up less to take a look at the file, we see we can scroll down, and we find

00:07:52.160 --> 00:07:56.440
 the exact same function that Firefox pointed out to us in the debug options.

00:07:56.440 --> 00:08:02.720
 This is what we'll try to change.

00:08:02.720 --> 00:08:06.800
 So at the tail end of this, it says return native policies.

00:08:06.800 --> 00:08:09.000
 Perhaps we'll just try to change this singular line.

00:08:09.000 --> 00:08:15.400
 If we go back to our terminal, we'll use said, and we replace return native policies with

00:08:15.400 --> 00:08:18.640
 return null.

00:08:18.640 --> 00:08:22.000
 After we make that edit and we reload the file, we can see that that line has been updated

00:08:22.000 --> 00:08:23.880
 to return null.

00:08:23.880 --> 00:08:28.720
 Now we have to repack and reinstall these changes into Firefox.

00:08:28.720 --> 00:08:30.760
 You can do that using the zip command.

00:08:30.760 --> 00:08:32.980
 Unfortunately, this is a bit of a magic string.

00:08:32.980 --> 00:08:36.000
 There was some trial and error on this.

00:08:36.000 --> 00:08:42.560
 It kept crashing unless this Omni.jfile was repacked in a very specific way.

00:08:42.560 --> 00:08:45.440
 But we reload that and we copy it back in.

00:08:45.440 --> 00:08:47.720
 And that's really all there is to it.

00:08:47.720 --> 00:08:52.240
 And suddenly -- oh, sorry, one more bit of magic.

00:08:52.240 --> 00:08:58.000
 Firefox, you have to add this .purge caches file so it will reload everything from the

00:08:58.000 --> 00:08:59.800
 Omni.jfile.

00:08:59.800 --> 00:09:05.960
 If you don't do that, your changes won't really sink into the rest of Firefox.

00:09:05.960 --> 00:09:09.080
 After that, we go back to our browser console and we see the same things.

00:09:09.080 --> 00:09:13.840
 We see the policy being loaded and it printing it out right before it returns it.

00:09:13.840 --> 00:09:18.960
 But then all of a sudden we go to our about policies and we find the enterprise policy

00:09:18.960 --> 00:09:20.820
 service is completely inactive.

00:09:20.820 --> 00:09:22.540
 As if nothing ever happened.

00:09:22.540 --> 00:09:24.680
 It got the policy from the service.

00:09:24.680 --> 00:09:27.880
 It was logged that it got the policy from the service.

00:09:27.880 --> 00:09:32.060
 But it never actually did anything with it.

00:09:32.060 --> 00:09:36.360
 And if we open our hamburger menu and we look on the right, we see our new private window

00:09:36.360 --> 00:09:40.800
 option has been returned to us.

00:09:40.800 --> 00:09:48.960
 So some -- thank you.

00:09:48.960 --> 00:09:52.200
 Some very quick conclusions.

00:09:52.200 --> 00:09:53.280
 Open source tools are awesome.

00:09:53.280 --> 00:09:55.960
 They can very easily be extended or changed.

00:09:55.960 --> 00:09:58.180
 Sometimes there's very good documentation for them.

00:09:58.180 --> 00:10:00.800
 But generally they're built in a way such that they can be improved.

00:10:00.800 --> 00:10:03.620
 But Firefox is no exception to that.

00:10:03.620 --> 00:10:08.200
 The trouble with this implementation and using a JavaScript module for this handling is that

00:10:08.200 --> 00:10:12.000
 this policy service can be very easily blanked as I did.

00:10:12.000 --> 00:10:17.100
 As an exercise to the listener, you could potentially inject malicious policy.

00:10:17.100 --> 00:10:21.440
 Set up proxies, load Firefox extensions.

00:10:21.440 --> 00:10:23.940
 There are many things you could do with this.

00:10:23.940 --> 00:10:29.420
 So applications that load security functions, they probably should have some sort of protection

00:10:29.420 --> 00:10:30.980
 for this code.

00:10:30.980 --> 00:10:36.740
 As far as I could tell, Firefox wasn't validating the Omni.J file or checking for changes to

00:10:36.740 --> 00:10:37.740
 it.

00:10:37.740 --> 00:10:42.140
 And as far as I could tell in the security tools for my company, our EDR and MDM tools

00:10:42.140 --> 00:10:45.020
 were also not checking this file.

00:10:45.020 --> 00:10:47.180
 Just the main Firefox binary.

00:10:47.180 --> 00:10:50.020
 So none of this was detected at all.

00:10:50.020 --> 00:10:53.060
 Lastly, get your incognito tabs back.

00:10:53.060 --> 00:11:03.540
 I can't exactly condone the violation of enterprise policy, but sometimes privacy is good.

00:11:03.540 --> 00:11:04.540
 That's all I have for you.

00:11:04.540 --> 00:11:05.540
 Very quick.

00:11:05.540 --> 00:11:16.740
 Thank you all for listening.

00:11:16.740 --> 00:11:18.820
 So thank you very much for the talk.

00:11:18.820 --> 00:11:19.820
 Pretty interesting.

00:11:19.820 --> 00:11:21.780
 I hope also for the folk over here.

00:11:21.780 --> 00:11:25.140
 I think we have more than enough time for questions.

00:11:25.140 --> 00:11:30.380
 So please, maybe you can start with some questions from the internet.

00:11:30.380 --> 00:11:31.380
 So are there some?

00:11:31.380 --> 00:11:32.380
 Sure.

00:11:32.380 --> 00:11:35.060
 There is a question.

00:11:35.060 --> 00:11:37.700
 Did you report this issue to Firefox?

00:11:37.700 --> 00:11:39.620
 And what happened?

00:11:39.620 --> 00:11:40.780
 A little louder.

00:11:40.780 --> 00:11:44.660
 Did you report this issue to Firefox directly?

00:11:44.660 --> 00:11:47.620
 I have not reported this to Mozilla.

00:11:47.620 --> 00:11:53.340
 It seems to be a very minor problem and perhaps is working as intended.

00:11:53.340 --> 00:11:58.020
 Firefox is not a browser meant for enterprise management.

00:11:58.020 --> 00:11:59.500
 Okay.

00:11:59.500 --> 00:12:02.860
 Thank you.

00:12:02.860 --> 00:12:05.980
 So we have another question over here.

00:12:05.980 --> 00:12:09.260
 Hello.

00:12:09.260 --> 00:12:15.020
 Do your users not have the ability to turn off SIP entirely anyway?

00:12:15.020 --> 00:12:18.060
 Like reboot and recovery mode?

00:12:18.060 --> 00:12:19.260
 I'm so glad you brought that up.

00:12:19.260 --> 00:12:21.980
 I skipped over that in my notes.

00:12:21.980 --> 00:12:26.220
 Your users did have the ability to turn off system integrity protection, but in this use

00:12:26.220 --> 00:12:30.700
 case we are pretending that the user is trying to bypass controls and they presumably don't

00:12:30.700 --> 00:12:32.300
 want to be detected.

00:12:32.300 --> 00:12:35.380
 Turning off system integrity protection is like waving a giant red flag and saying I

00:12:35.380 --> 00:12:40.700
 have compromised my own machine and would be very quickly detected by IT teams.

00:12:40.700 --> 00:12:41.700
 But thank you.

00:12:41.700 --> 00:12:46.460
 Howdy.

00:12:46.460 --> 00:12:49.860
 I'm also a screen engineer at a company that has decided to push profiles to their browsers

00:12:49.860 --> 00:12:54.900
 to disabling not only Cognito Mode but editing cookies and stuff like that.

00:12:54.900 --> 00:12:59.740
 We unfortunately use Chrome and I did the same thing with Chrome.

00:12:59.740 --> 00:13:09.060
 I found that if you run the VAR DB path, you can create an empty file system image, mount

00:13:09.060 --> 00:13:10.860
 it over that and they all just disappear.

00:13:10.860 --> 00:13:14.060
 I need no privileges at all.

00:13:14.060 --> 00:13:19.620
 Alternatively I'll use LD preload or the MAC equivalent and just change the CIS call responses.

00:13:19.620 --> 00:13:20.620
 That's very clever.

00:13:20.620 --> 00:13:24.540
 I use that with Chrome because that's more like closed source, but modifying the Firefox

00:13:24.540 --> 00:13:25.540
 is pretty cool too.

00:13:25.540 --> 00:13:26.540
 Very, very clever.

00:13:26.540 --> 00:13:30.860
 But if you were to mount that empty directory, wouldn't it wipe out all enterprise policy

00:13:30.860 --> 00:13:31.860
 on the machine?

00:13:31.860 --> 00:13:32.860
 Yes.

00:13:32.860 --> 00:13:33.860
 Dangerous.

00:13:33.860 --> 00:13:38.780
 Thank you for sharing.

00:13:38.780 --> 00:13:47.580
 Okay, another question.

00:13:47.580 --> 00:13:50.780
 All those sports activity over here.

00:13:50.780 --> 00:13:53.180
 Thank you for the presentation.

00:13:53.180 --> 00:13:57.820
 The files you modified, were they in the application data or in the user home directory Firefox

00:13:57.820 --> 00:13:58.820
 profile?

00:13:58.820 --> 00:14:00.900
 These were in the application data.

00:14:00.900 --> 00:14:03.780
 Thank you.

00:14:03.780 --> 00:14:08.940
 His mic isn't on.

00:14:08.940 --> 00:14:09.940
 No?

00:14:09.940 --> 00:14:10.940
 Thank you for the talk.

00:14:10.940 --> 00:14:13.220
 Very interesting.

00:14:13.220 --> 00:14:19.820
 You said that like code integrity checks would be helped to fix the situation, but a user

00:14:19.820 --> 00:14:25.820
 with some administrative level access could also just bypass those verification checks.

00:14:25.820 --> 00:14:32.180
 Like where do you draw the line where what an administrative user should be able to

00:14:32.180 --> 00:14:38.140
 do and what not, because you are already privileged?

00:14:38.140 --> 00:14:40.820
 You make an interesting point.

00:14:40.820 --> 00:14:45.980
 I would hope at least to maintain some level of integrity that Firefox would perhaps sign

00:14:45.980 --> 00:14:50.100
 this file or check that signature in the binary.

00:14:50.100 --> 00:14:54.660
 It's just something to make sure, just a little, make it a little bit more difficult.

00:14:54.660 --> 00:14:58.460
 You're correct though, at some level when you have administrative access, there is something

00:14:58.460 --> 00:15:00.740
 you can do always.

00:15:00.740 --> 00:15:05.060
 Even this gentleman mentioned you can blank all the policies on your machine by mounting

00:15:05.060 --> 00:15:09.220
 an empty directory at that location.

00:15:09.220 --> 00:15:13.420
 We could have a rabbit hole all day about where is the line.

00:15:13.420 --> 00:15:20.620
 I don't know where it should be.

00:15:20.620 --> 00:15:24.820
 Some other questions you would like to ask?

00:15:24.820 --> 00:15:29.860
 Over there.

00:15:29.860 --> 00:15:34.900
 As you said, a privileged user, if you have root you can do anything.

00:15:34.900 --> 00:15:40.780
 Typically at least at our place when they push out dystopian policies, you don't have

00:15:40.780 --> 00:15:43.780
 root.

00:15:43.780 --> 00:15:47.020
 Do you have any ideas?

00:15:47.020 --> 00:15:54.780
 It's a rabbit hole now, but any tricks in that direction that you could think of that

00:15:54.780 --> 00:16:00.780
 you could do as a user without root access?

00:16:00.780 --> 00:16:05.420
 Not that I had necessarily explored.

00:16:05.420 --> 00:16:09.500
 Most of the users had some level of local administrative access, so that was kind of

00:16:09.500 --> 00:16:11.920
 my environment that I was working in.

00:16:11.920 --> 00:16:16.940
 I didn't explore from the perspective of a non-privileged user.

00:16:16.940 --> 00:16:21.140
 Perhaps we can talk afterwards and maybe someone else has a good idea.

00:16:21.140 --> 00:16:26.940
 Thank you.

00:16:26.940 --> 00:16:29.780
 So somebody else?

00:16:29.780 --> 00:16:31.860
 No?

00:16:31.860 --> 00:16:41.940
 Also, I think we do not have anyone in the Fettyverse so far, so then I think we can

00:16:41.940 --> 00:16:50.780
 give a warm and grateful applause again to Ryan and Karen.

00:16:50.780 --> 00:16:53.360
 (gentle music)

00:16:53.360 --> 00:16:54.920
 (gentle music)

