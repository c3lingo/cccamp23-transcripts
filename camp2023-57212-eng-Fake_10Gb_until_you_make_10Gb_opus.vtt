WEBVTT

00:00:00.000 --> 00:00:10.000
 [MUSIC]

00:00:10.000 --> 00:00:33.680
 So welcome our next speaker, Equinox.

00:00:33.680 --> 00:00:36.040
 Just take it away.

00:00:36.040 --> 00:00:36.520
 Yeah.

00:00:36.520 --> 00:00:37.320
 Hi, everyone.

00:00:37.320 --> 00:00:40.320
 I'm Equinox.

00:00:40.320 --> 00:00:44.160
 If you've looked at the Farplans, their schedule,

00:00:44.160 --> 00:00:46.920
 this is unfortunately a little bit of a rescue effort

00:00:46.920 --> 00:00:48.800
 because I had a hardware problem yesterday,

00:00:48.800 --> 00:00:51.760
 so I had to recreate the entire presentation.

00:00:51.760 --> 00:00:55.440
 I apologize ahead of time for this being a little bit less

00:00:55.440 --> 00:00:57.680
 polished than I would have liked it to be.

00:00:57.680 --> 00:01:03.640
 So let's start with a quick outline of what

00:01:03.640 --> 00:01:05.600
 I want to talk about here.

00:01:05.600 --> 00:01:07.960
 I hope you did look at the talk description.

00:01:07.960 --> 00:01:11.160
 If you don't know where you are, then maybe go figure that out.

00:01:11.160 --> 00:01:19.320
 This is mostly about how to do HF design without knowing

00:01:19.320 --> 00:01:21.840
 how to do HF design.

00:01:21.840 --> 00:01:27.520
 It's a bit of an experience report from having it done.

00:01:27.520 --> 00:01:30.960
 I'm first going to give some general framing so you

00:01:30.960 --> 00:01:33.880
 know what the goal is, what the target is.

00:01:33.880 --> 00:01:38.760
 I'm going to go talk a little bit about why this is generally

00:01:38.760 --> 00:01:45.240
 something people don't like doing, why it's hard,

00:01:45.240 --> 00:01:48.200
 how I ended up doing it without having the proper tools for it,

00:01:48.200 --> 00:01:50.280
 what the result was, and then there's

00:01:50.280 --> 00:01:56.080
 some room for general things about this thing.

00:01:56.080 --> 00:01:58.400
 I am a software person.

00:01:58.400 --> 00:02:00.960
 I don't build hardware as a job.

00:02:00.960 --> 00:02:05.320
 I never learned how to build hardware.

00:02:05.320 --> 00:02:06.960
 I pick up things.

00:02:06.960 --> 00:02:10.200
 If you talk to someone who knows how to do HF design,

00:02:10.200 --> 00:02:14.920
 raise your hand if you actually know how to do HF design with--

00:02:14.920 --> 00:02:17.440
 oh, there's someone here in the video team.

00:02:17.440 --> 00:02:18.000
 One more.

00:02:18.000 --> 00:02:20.480
 You will be incredibly bored, and if you

00:02:20.480 --> 00:02:23.400
 see me saying something that is wrong,

00:02:23.400 --> 00:02:26.360
 feel free to correct me.

00:02:26.360 --> 00:02:27.360
 OK.

00:02:27.360 --> 00:02:30.640
 Also, if you talk to someone afterwards and they tell you,

00:02:30.640 --> 00:02:32.800
 I said something that was completely wrong, that

00:02:32.800 --> 00:02:37.000
 is very easily possible.

00:02:37.000 --> 00:02:41.560
 This got started as a project from the CCZ NOC

00:02:41.560 --> 00:02:45.280
 from running event networks.

00:02:45.280 --> 00:02:50.560
 If you have been around for 29C3 till 33C3

00:02:50.560 --> 00:02:52.480
 when we were in Hamburg, the building

00:02:52.480 --> 00:02:59.800
 has a lot of shitty fiber, and yeah, it wasn't great.

00:02:59.800 --> 00:03:04.040
 And to deal with that, the idea was

00:03:04.040 --> 00:03:09.200
 to go look at maybe making some tool for helping with that.

00:03:09.200 --> 00:03:11.920
 In the particular case of the CCH,

00:03:11.920 --> 00:03:13.480
 the problem is actually dispersion,

00:03:13.480 --> 00:03:16.240
 which if you have multimode fiber,

00:03:16.240 --> 00:03:18.360
 the signal has multiple modes.

00:03:18.360 --> 00:03:20.960
 That's the definition of a multimode fiber that it can take,

00:03:20.960 --> 00:03:23.880
 and those have different speeds, so the signal

00:03:23.880 --> 00:03:25.160
 gets mushy kind of.

00:03:25.160 --> 00:03:26.700
 I don't have an installation of this,

00:03:26.700 --> 00:03:29.080
 but we can talk about this later in the talk.

00:03:29.080 --> 00:03:31.040
 It's going to come up again.

00:03:31.040 --> 00:03:35.240
 So the idea was born to make a kind of a fiber

00:03:35.240 --> 00:03:41.400
 tool for building networks, for debugging networks,

00:03:41.400 --> 00:03:43.960
 originally just to extend connections in the CCH

00:03:43.960 --> 00:03:46.400
 when we were range limited.

00:03:46.400 --> 00:03:50.120
 This kind of evolved into a more generic multi-tool later.

00:03:50.120 --> 00:03:57.960
 If you work with network equipment and home-built tools

00:03:57.960 --> 00:03:59.840
 in this area, you may know that there

00:03:59.840 --> 00:04:05.040
 are some PCBs that connect to fiber transceivers just

00:04:05.040 --> 00:04:06.880
 directly to each other.

00:04:06.880 --> 00:04:09.360
 This was not the goal here.

00:04:09.360 --> 00:04:13.400
 The goal was to have an active repeater.

00:04:13.400 --> 00:04:15.840
 I'm noticing a few confused faces.

00:04:15.840 --> 00:04:18.600
 I think I will go a little bit further in explaining

00:04:18.600 --> 00:04:21.840
 what the goal here is.

00:04:21.840 --> 00:04:23.620
 I didn't include slides for this.

00:04:23.620 --> 00:04:26.000
 Actually, the next slide is good for this.

00:04:26.000 --> 00:04:28.280
 This is the prototype of this project.

00:04:28.280 --> 00:04:31.120
 What you can see on the left, those two metal cages

00:04:31.120 --> 00:04:34.120
 with numbers 1 and 2, those are slots

00:04:34.120 --> 00:04:39.920
 for optical transceivers for running network over fiber.

00:04:39.920 --> 00:04:42.440
 You put a module into that that matches the infrastructure

00:04:42.440 --> 00:04:44.160
 that you need for your network.

00:04:44.160 --> 00:04:46.960
 That might be a multimode transceiver, a single mode

00:04:46.960 --> 00:04:49.600
 transceiver, a single mode transceiver with very long

00:04:49.600 --> 00:04:53.400
 range, depending on what your cabling is.

00:04:53.400 --> 00:04:56.640
 If you have an intercontinental fiber going through the ocean,

00:04:56.640 --> 00:04:59.480
 you may want to use a very long range transceiver

00:04:59.480 --> 00:05:01.680
 and some amplifiers in the middle.

00:05:01.680 --> 00:05:03.800
 It's made into separate modules so you

00:05:03.800 --> 00:05:06.080
 can adapt to the situation that you have at hand.

00:05:06.080 --> 00:05:08.960
 You use the transceiver that you need.

00:05:08.960 --> 00:05:12.640
 Those run at 1 gigabit, 10 gigabit, 25 gigabit, soon,

00:05:12.640 --> 00:05:13.800
 even more.

00:05:13.800 --> 00:05:17.440
 25 is the current limit for this form factor.

00:05:17.440 --> 00:05:21.240
 But this talk is about 10 gigabit ethernet mostly,

00:05:21.240 --> 00:05:25.080
 which was current at the time that I started this project.

00:05:25.080 --> 00:05:29.880
 This thing has--

00:05:29.880 --> 00:05:31.560
 I've built it like four years ago.

00:05:31.560 --> 00:05:35.240
 It was just an attempt at getting something going.

00:05:35.240 --> 00:05:39.880
 You can see there is a small little chip immediately

00:05:39.880 --> 00:05:41.680
 to the right of those two slots.

00:05:41.680 --> 00:05:44.360
 And that is an active electrical repeater.

00:05:44.360 --> 00:05:47.000
 Let's go back to the previous slide for a little bit.

00:05:47.000 --> 00:05:49.320
 You can frequently find these boards

00:05:49.320 --> 00:05:52.640
 without that chip in there, which means the two transceivers

00:05:52.640 --> 00:05:58.520
 that you have for converting your fiber signal into the

00:05:58.520 --> 00:06:00.640
 interface that your system needs,

00:06:00.640 --> 00:06:03.080
 they are just connected back to back to each other.

00:06:03.080 --> 00:06:06.400
 So the output from one goes into the input from another.

00:06:06.400 --> 00:06:10.920
 That, in this case, was specifically a requirement

00:06:10.920 --> 00:06:12.480
 that this is not enough.

00:06:12.480 --> 00:06:15.160
 Because in a situation like in Hamburg with the building

00:06:15.160 --> 00:06:18.560
 with the shitty fibers, you get a shitty signal

00:06:18.560 --> 00:06:21.120
 and just retransmitting this shitty signal

00:06:21.120 --> 00:06:22.640
 is not going to help you.

00:06:22.640 --> 00:06:25.880
 So I hope I collected some more people

00:06:25.880 --> 00:06:27.160
 to see where this is going.

00:06:27.160 --> 00:06:33.000
 As I said, this is the first prototype.

00:06:33.000 --> 00:06:33.920
 It did actually work.

00:06:33.920 --> 00:06:39.040
 This is the current version.

00:06:39.040 --> 00:06:41.520
 The slide is mostly here, so you know what I'm actually

00:06:41.520 --> 00:06:44.120
 talking about in the next slides.

00:06:44.120 --> 00:06:47.480
 The actual problem here is there's a lot of high speed

00:06:47.480 --> 00:06:52.360
 signals, four in this case, coming from four receivers.

00:06:52.360 --> 00:06:53.800
 And you need to deal with those.

00:06:53.800 --> 00:06:58.240
 And dealing with, in this case, five gigahertz

00:06:58.240 --> 00:07:03.760
 of an electrical signal is not a lot of fun.

00:07:03.760 --> 00:07:10.280
 So let's get into the actual topic of this presentation.

00:07:10.280 --> 00:07:15.960
 It's not easy to do these designs.

00:07:15.960 --> 00:07:19.040
 The handbook for this, this is one of the references

00:07:19.040 --> 00:07:21.520
 that people point at when you try to get

00:07:21.520 --> 00:07:23.440
 started in this general area.

00:07:23.440 --> 00:07:26.880
 It's literally called the Handbook of Black Magic.

00:07:26.880 --> 00:07:30.440
 And it is appropriately called that.

00:07:30.440 --> 00:07:34.840
 As soon as your signals start to get a little bit faster,

00:07:34.840 --> 00:07:38.440
 you don't actually have rectangular waveforms anymore

00:07:38.440 --> 00:07:39.160
 for your signals.

00:07:39.160 --> 00:07:42.720
 Everything starts to get mushy.

00:07:42.720 --> 00:07:45.800
 And this is the first recommendation, basically,

00:07:45.800 --> 00:07:49.400
 that I have buried in this talk.

00:07:49.400 --> 00:07:52.560
 This book is still relevant.

00:07:52.560 --> 00:07:54.400
 The physics doesn't really change.

00:07:54.400 --> 00:07:57.240
 The chips have gotten a lot better.

00:07:57.240 --> 00:07:59.960
 And there is, basically, with chips getting better,

00:07:59.960 --> 00:08:02.320
 they also get better at dealing with 3D signals.

00:08:02.320 --> 00:08:05.240
 They get better at outputting clean signals.

00:08:05.240 --> 00:08:07.480
 So you can just multiply everything in this book

00:08:07.480 --> 00:08:09.200
 by some factor.

00:08:09.200 --> 00:08:10.360
 And it still applies.

00:08:10.360 --> 00:08:12.920
 It's just, if this book says something about 10 megahertz,

00:08:12.920 --> 00:08:15.440
 it might now apply for a higher frequency in some cases,

00:08:15.440 --> 00:08:17.880
 because the silicon has just gotten better.

00:08:17.880 --> 00:08:20.600
 This doesn't apply everywhere, but it applies somewhere.

00:08:20.600 --> 00:08:22.760
 This book is also great to get started

00:08:22.760 --> 00:08:26.320
 to understand what you don't understand.

00:08:26.320 --> 00:08:30.280
 So coming from a position of knowing exactly nothing

00:08:30.280 --> 00:08:33.640
 about this, this book for me was a good point of entry

00:08:33.640 --> 00:08:36.040
 to figure out, oh, this will be a problem.

00:08:36.040 --> 00:08:37.120
 That will be a problem.

00:08:37.120 --> 00:08:39.200
 That will be a problem.

00:08:39.200 --> 00:08:43.560
 Let's look at actual high frequency electronics

00:08:43.560 --> 00:08:46.600
 and considerations in this area.

00:08:46.600 --> 00:08:48.640
 You start from your naive assumption

00:08:48.640 --> 00:08:53.160
 of having an ideal cable, which is just a wire.

00:08:53.160 --> 00:08:57.800
 That works, I don't know, maybe to the megahertz range.

00:08:57.800 --> 00:08:59.720
 I think even in the higher megahertz range,

00:08:59.720 --> 00:09:01.440
 you get problems with this.

00:09:01.440 --> 00:09:02.920
 When you start getting problems, you

00:09:02.920 --> 00:09:08.320
 start considering the cable as a sequence of parasitic elements.

00:09:08.320 --> 00:09:10.440
 They're called parasitic because they're not

00:09:10.440 --> 00:09:11.920
 intended to be there.

00:09:11.920 --> 00:09:14.200
 So what you see at the bottom here is just a model

00:09:14.200 --> 00:09:17.800
 of what you treat the cable like.

00:09:17.800 --> 00:09:20.480
 Suddenly you have capacitance, you have resistance,

00:09:20.480 --> 00:09:24.040
 you have inductive elements.

00:09:24.040 --> 00:09:25.480
 The cable isn't built like this.

00:09:25.480 --> 00:09:27.120
 This is just a model of understanding

00:09:27.120 --> 00:09:28.520
 what the cable does.

00:09:28.520 --> 00:09:30.840
 But this is only the first level.

00:09:30.840 --> 00:09:34.560
 As soon as you start going into even higher frequencies,

00:09:34.560 --> 00:09:38.720
 in this case, this is a vertical cut simulated

00:09:38.720 --> 00:09:43.840
 through a printed circuit board with two signals.

00:09:43.840 --> 00:09:46.640
 And you can see on the right-hand side

00:09:46.640 --> 00:09:49.940
 is the energy distribution of the signal

00:09:49.940 --> 00:09:55.000
 being propagated along the trace on the PCB.

00:09:55.000 --> 00:09:58.860
 And you can see it's not actually uniform in the trace

00:09:58.860 --> 00:09:59.360
 anymore.

00:09:59.360 --> 00:10:00.440
 The trace is black.

00:10:00.440 --> 00:10:04.600
 All the energy is flowing on the outside of the trace.

00:10:04.600 --> 00:10:09.360
 So you really can't consider a wire or trace a wire anymore.

00:10:09.360 --> 00:10:11.080
 It behaves in odd ways.

00:10:11.080 --> 00:10:17.000
 When you go to higher frequencies again,

00:10:17.000 --> 00:10:20.080
 you should be simulating your design

00:10:20.080 --> 00:10:24.800
 in some software that just takes a 3D model of your entire

00:10:24.800 --> 00:10:30.720
 printed circuit board and divides it into very tiny elements

00:10:30.720 --> 00:10:33.440
 and just calculates Maxwell's equations

00:10:33.440 --> 00:10:36.280
 for every single element.

00:10:36.280 --> 00:10:38.800
 And by doing that, you can get a better impression

00:10:38.800 --> 00:10:41.600
 of what your printed circuit board actually

00:10:41.600 --> 00:10:45.880
 behaves like when you put a signal on it.

00:10:45.880 --> 00:10:50.640
 This currently-- I'm not sure how far the key cut support

00:10:50.640 --> 00:10:53.080
 for this has come.

00:10:53.080 --> 00:10:54.760
 When I started the project, there

00:10:54.760 --> 00:10:56.540
 was no open source implementation of this

00:10:56.540 --> 00:10:58.320
 that was really usable.

00:10:58.320 --> 00:11:02.880
 So I didn't really want to buy a software license for something

00:11:02.880 --> 00:11:05.880
 like this, which would have cost, I don't know, a few thousand

00:11:05.880 --> 00:11:06.380
 euros.

00:11:06.380 --> 00:11:08.500
 I didn't know people at the time who had the license,

00:11:08.500 --> 00:11:13.920
 so I just didn't do this, which is kind of, again,

00:11:13.920 --> 00:11:14.840
 the topic of the talk.

00:11:14.840 --> 00:11:17.760
 How do you do this without the proper tools?

00:11:17.760 --> 00:11:20.120
 And even worse, the simulation is not even

00:11:20.120 --> 00:11:22.560
 going to tell you what the actual result is from making

00:11:22.560 --> 00:11:24.520
 your printed circuit board.

00:11:24.520 --> 00:11:27.560
 At these frequencies, you start getting problems

00:11:27.560 --> 00:11:30.720
 with having corners in your traces where things are just

00:11:30.720 --> 00:11:32.440
 getting reflected.

00:11:32.440 --> 00:11:36.000
 Making your trace on the PCB wider or smaller

00:11:36.000 --> 00:11:39.400
 can cause reflections, can cause loss.

00:11:39.400 --> 00:11:43.400
 Having wires going through the board starts becoming a problem.

00:11:43.400 --> 00:11:45.400
 So at some point, when you go high enough

00:11:45.400 --> 00:11:49.320
 in the frequencies and the data rates that you want to handle,

00:11:49.320 --> 00:11:52.080
 you really need to build the boards, measure them,

00:11:52.080 --> 00:11:55.480
 take the feedback into account, build them again.

00:11:55.480 --> 00:11:57.400
 As with before, I didn't do this.

00:11:57.400 --> 00:12:00.160
 The lab gear for this is seriously expensive.

00:12:00.160 --> 00:12:03.280
 Even renting it is very expensive.

00:12:03.280 --> 00:12:06.920
 I could have shipped it out to some people to measure it.

00:12:06.920 --> 00:12:08.760
 I did, in fact, ask for that.

00:12:08.760 --> 00:12:11.040
 And people said, yeah, I will measure it for you.

00:12:11.040 --> 00:12:13.640
 Unfortunately, I didn't do it.

00:12:13.640 --> 00:12:19.080
 So the end result is what I call design by angst.

00:12:19.080 --> 00:12:24.280
 So all I could do was basically read as much as I could find,

00:12:24.280 --> 00:12:26.760
 read the application notes for the chips I'm using,

00:12:26.760 --> 00:12:32.000
 try to be as careful as possible, and use the tools

00:12:32.000 --> 00:12:33.880
 that I have available.

00:12:33.880 --> 00:12:39.640
 So if I go back to these--

00:12:39.640 --> 00:12:41.120
 what's the English word?--

00:12:41.120 --> 00:12:44.920
 cuts through the PCBs, those are for the actual PCB

00:12:44.920 --> 00:12:47.400
 that I ended up building.

00:12:47.400 --> 00:12:51.280
 And they seem to be not too far off.

00:12:51.280 --> 00:12:54.920
 And funnily enough, this is a very, very tool

00:12:54.920 --> 00:12:57.360
 from a PCB suite that has been discontinued.

00:12:57.360 --> 00:13:00.720
 It says at the bottom it's called AlterPCB_TLINE_SIM.

00:13:00.720 --> 00:13:03.480
 If anyone wants to play around with that,

00:13:03.480 --> 00:13:05.800
 you can still find the code by digging around on GitHub.

00:13:05.800 --> 00:13:07.240
 You need to build it yourself.

00:13:07.240 --> 00:13:09.680
 It's a very odd tool.

00:13:09.680 --> 00:13:12.800
 But this was the limit of tools I had access to at the time.

00:13:12.800 --> 00:13:22.160
 This is basically what ended up being my result from just

00:13:22.160 --> 00:13:26.440
 trying to, I guess, bullshit my way through the design.

00:13:26.440 --> 00:13:31.360
 So you can see on the top there is

00:13:31.360 --> 00:13:33.680
 the four ports for the transceivers

00:13:33.680 --> 00:13:35.920
 that I mentioned before.

00:13:35.920 --> 00:13:44.040
 I've drawn in what I could remember in precautions to take.

00:13:44.040 --> 00:13:46.560
 Some are kind of self-explanatory.

00:13:46.560 --> 00:13:49.440
 I did try to length match the differential pairs.

00:13:49.440 --> 00:13:53.000
 That's the circle thing on the bottom left.

00:13:53.000 --> 00:13:54.880
 Some application notes nowadays say

00:13:54.880 --> 00:13:58.440
 that you shouldn't do this, which I didn't understand.

00:13:58.440 --> 00:14:01.680
 So I just kept doing it.

00:14:01.680 --> 00:14:04.120
 I did keep distance between the differential pairs,

00:14:04.120 --> 00:14:07.080
 which is something every data sheet tells you to do.

00:14:07.080 --> 00:14:11.400
 There's something called the 3W rule, or even the 5W rule,

00:14:11.400 --> 00:14:14.360
 which says that whatever the distance between your pairs

00:14:14.360 --> 00:14:18.520
 is, you should have three times or five times that distance

00:14:18.520 --> 00:14:23.360
 as free area to your other traces.

00:14:23.360 --> 00:14:26.640
 I did make this design by keeping everything

00:14:26.640 --> 00:14:29.480
 as short as I could, which then people also

00:14:29.480 --> 00:14:32.080
 told me that that might not be a good idea, because if you

00:14:32.080 --> 00:14:39.480
 have a short line, it's basically less attenuation

00:14:39.480 --> 00:14:41.840
 for any reflections that you may have.

00:14:41.840 --> 00:14:44.240
 So if your signal starts going back and forth,

00:14:44.240 --> 00:14:47.000
 which it can very much do at these frequencies,

00:14:47.000 --> 00:14:50.480
 if it's a longer trace, it will get attenuated on the way back

00:14:50.480 --> 00:14:53.920
 and then attenuated again, so your reflections die down.

00:14:53.920 --> 00:14:59.000
 And this doesn't happen as much if you have a shorter trace.

00:14:59.000 --> 00:15:03.400
 I went with this.

00:15:03.400 --> 00:15:05.800
 I also used anti-pads, which is just

00:15:05.800 --> 00:15:08.160
 punching a hole in the ground plane that

00:15:08.160 --> 00:15:11.040
 is under the connector in this case,

00:15:11.040 --> 00:15:16.280
 because the connector has a much larger area on the printed

00:15:16.280 --> 00:15:20.440
 circuit board where the connector needs to be soldered onto.

00:15:20.440 --> 00:15:24.000
 And that doesn't match the behavior of the other traces

00:15:24.000 --> 00:15:24.800
 on your board.

00:15:24.800 --> 00:15:27.000
 So what you do is you cut a hole in the ground plane,

00:15:27.000 --> 00:15:30.320
 and that kind of compensates for that.

00:15:30.320 --> 00:15:33.840
 There are some things you can't see in the diagram.

00:15:33.840 --> 00:15:35.680
 You always have to have a continuous ground

00:15:35.680 --> 00:15:37.480
 with all of these things.

00:15:37.480 --> 00:15:39.840
 And that ground plane needs to be directly

00:15:39.840 --> 00:15:41.960
 below your high-speed traces.

00:15:41.960 --> 00:15:45.200
 Or if the high-speed traces are inside of the board,

00:15:45.200 --> 00:15:49.760
 you need to sandwich it in power supply planes.

00:15:49.760 --> 00:15:53.840
 You need to have decoupling for the chips you use.

00:15:53.840 --> 00:15:56.800
 Using wires makes things really hard.

00:15:56.800 --> 00:15:59.400
 So you can see I was able to get away

00:15:59.400 --> 00:16:03.560
 without using any wires, which probably--

00:16:03.560 --> 00:16:07.880
 if I had to use wires to go to the other side of the board,

00:16:07.880 --> 00:16:13.800
 then I'm guessing that this probably would not have worked.

00:16:13.800 --> 00:16:18.400
 So yeah, the layout in this case worked out.

00:16:18.400 --> 00:16:23.840
 To be fair, most chips in this area for high-speed signals

00:16:23.840 --> 00:16:27.560
 are designed to make the layout as easy as possible.

00:16:27.560 --> 00:16:31.120
 I did also invert the polarity on some of the traces here,

00:16:31.120 --> 00:16:33.400
 reversing plus and minus basically

00:16:33.400 --> 00:16:35.360
 inside of the differential pair.

00:16:35.360 --> 00:16:36.900
 The chips have a bit in the output

00:16:36.900 --> 00:16:39.080
 that you can set that just reverses that,

00:16:39.080 --> 00:16:43.520
 and you just need to set the bit correctly to change it back.

00:16:43.520 --> 00:16:48.640
 So the whole point of this talk is, did this work?

00:16:48.640 --> 00:16:52.480
 If you know HF, then you can understand it's a yes.

00:16:52.480 --> 00:16:55.560
 If you don't know HF, I will explain shortly

00:16:55.560 --> 00:16:57.960
 what these pictures mean.

00:16:57.960 --> 00:17:00.640
 However, if you understand HF, you also

00:17:00.640 --> 00:17:02.840
 mean that it didn't quite work.

00:17:02.840 --> 00:17:06.280
 So I can hear a few laughs.

00:17:06.280 --> 00:17:08.760
 All of these are eye diagrams.

00:17:08.760 --> 00:17:12.880
 What an eye diagram is is from your high-speed signal,

00:17:12.880 --> 00:17:15.040
 in this case, 10 gigabit ethernet.

00:17:15.040 --> 00:17:17.200
 You take one clock period and just keep

00:17:17.200 --> 00:17:19.760
 stacking it on top of itself.

00:17:19.760 --> 00:17:23.240
 So looking at these diagrams, you

00:17:23.240 --> 00:17:26.520
 have the signal going from a 1 to a 1 to a 1,

00:17:26.520 --> 00:17:28.920
 from a 1 to a 1 to a 0 or something,

00:17:28.920 --> 00:17:30.880
 or from a 0 to a 1 to a 0.

00:17:30.880 --> 00:17:33.280
 That creates these curves, basically.

00:17:33.280 --> 00:17:37.880
 And the horizontal is one period of the signal.

00:17:37.880 --> 00:17:41.280
 And you just stack it and stack it.

00:17:41.280 --> 00:17:43.520
 And five of these look good.

00:17:43.520 --> 00:17:47.280
 The sixth one in the bottom is actually still OK,

00:17:47.280 --> 00:17:49.080
 but much worse than the other ones.

00:17:49.080 --> 00:17:55.120
 The good thing in this case is that the chip I'm using

00:17:55.120 --> 00:17:57.880
 has a built-in monitor for generating these things,

00:17:57.880 --> 00:18:00.480
 because otherwise, I would need the expensive test equipment,

00:18:00.480 --> 00:18:03.600
 again, to even get this debugging information.

00:18:03.600 --> 00:18:08.360
 So that's also something to point out as part of this.

00:18:08.360 --> 00:18:11.480
 If you try to build high-speed electronics like this,

00:18:11.480 --> 00:18:13.320
 absolutely pay attention to the debugging

00:18:13.320 --> 00:18:14.760
 tools the chips give you.

00:18:14.760 --> 00:18:20.440
 Something I saw in more expensive other chips

00:18:20.440 --> 00:18:23.160
 was that they have a built-in error rate tester, which

00:18:23.160 --> 00:18:24.440
 this one doesn't.

00:18:24.440 --> 00:18:29.760
 So I wasn't yet able to run a bit error rate test.

00:18:29.760 --> 00:18:32.400
 I'm trying to find ways to do that.

00:18:32.400 --> 00:18:38.320
 But yeah, having this eye diagram monitor, it's a lifesaver.

00:18:38.320 --> 00:18:43.560
 Now, for that middle-bottom diagram,

00:18:43.560 --> 00:18:45.480
 that's where you really hit the limitations

00:18:45.480 --> 00:18:48.360
 of building something like this without the proper tools.

00:18:48.360 --> 00:18:50.400
 Essentially, I have no way to figure out

00:18:50.400 --> 00:18:53.800
 why that one connection is worse than the others.

00:18:53.800 --> 00:18:57.120
 It's probably still workable, but I'm not

00:18:57.120 --> 00:18:59.840
 comfortable with seeing that and knowing

00:18:59.840 --> 00:19:02.440
 that five of my connections are OK,

00:19:02.440 --> 00:19:06.200
 and the sixth one is somehow weird.

00:19:06.200 --> 00:19:08.000
 I was lucky in this case.

00:19:08.000 --> 00:19:11.560
 Well, lucky is maybe the wrong word.

00:19:11.560 --> 00:19:14.040
 I did just forget the AC coupling capacitors

00:19:14.040 --> 00:19:16.520
 on that connection.

00:19:16.520 --> 00:19:20.120
 The HF guys may laugh at me for this.

00:19:20.120 --> 00:19:23.360
 For everyone else, I may need to explain how many people don't

00:19:23.360 --> 00:19:25.800
 know what AC coupling is.

00:19:25.800 --> 00:19:27.320
 That's enough.

00:19:27.320 --> 00:19:31.000
 So for a signal like this--

00:19:31.000 --> 00:19:34.400
 let's go back to maybe this--

00:19:34.400 --> 00:19:37.240
 those two wires each are one signal,

00:19:37.240 --> 00:19:39.760
 and one wire goes in the positive direction,

00:19:39.760 --> 00:19:41.960
 the other goes to the negative direction.

00:19:41.960 --> 00:19:45.480
 And they go around a center point, basically.

00:19:45.480 --> 00:19:49.640
 And that is a DC component that just stays constant.

00:19:49.640 --> 00:19:52.760
 However, your receiver may have a requirement

00:19:52.760 --> 00:19:55.720
 for some specific midpoint voltage, which

00:19:55.720 --> 00:19:58.000
 means that you need to put a capacitor in the middle

00:19:58.000 --> 00:20:02.360
 so your receiver can shift the signal somewhere

00:20:02.360 --> 00:20:04.200
 where it likes to receive it.

00:20:04.200 --> 00:20:06.480
 And these ships have that requirement.

00:20:06.480 --> 00:20:09.360
 And the optical transceivers have this built in,

00:20:09.360 --> 00:20:11.560
 except I have some connections between the chips

00:20:11.560 --> 00:20:13.520
 where I completely forgot this.

00:20:13.520 --> 00:20:16.160
 So I'm hoping that I can get away without debugging

00:20:16.160 --> 00:20:19.640
 and just fix this.

00:20:19.640 --> 00:20:22.880
 For the record, I noticed this yesterday.

00:20:22.880 --> 00:20:24.920
 So oops.

00:20:24.920 --> 00:20:30.020
 It does actually work, though, which is kind of funny.

00:20:30.020 --> 00:20:32.480
 It hopefully is also the reason that this stuff is

00:20:32.480 --> 00:20:36.280
 getting hot as shit, because if you have some difference

00:20:36.280 --> 00:20:38.240
 in the DC levels between the two chips,

00:20:38.240 --> 00:20:43.240
 the sender might be outputting 1.6 volt common mode.

00:20:43.240 --> 00:20:45.680
 And the receiver might be trying to pull down

00:20:45.680 --> 00:20:47.080
 to 1.2 volt common mode.

00:20:47.080 --> 00:20:49.520
 And you have just 0.4 volts being

00:20:49.520 --> 00:20:51.080
 lost somewhere in the middle.

00:20:51.080 --> 00:20:53.660
 And that would explain why the ships are getting so hot.

00:20:53.660 --> 00:20:56.720
 I don't really have the stuff with me

00:20:56.720 --> 00:20:58.440
 to try and fix this here.

00:20:58.440 --> 00:21:02.040
 So I'll have to go back and try and debug this.

00:21:02.040 --> 00:21:04.700
 The other takeaway here is at some point,

00:21:04.700 --> 00:21:06.360
 you need to ask for help.

00:21:06.360 --> 00:21:09.080
 I did ask both RF guy and Andrew Zonberg for help.

00:21:09.080 --> 00:21:09.960
 And they both--

00:21:09.960 --> 00:21:14.280
 RF guy already was very helpful, gave me a lot of feedback.

00:21:14.280 --> 00:21:18.280
 Andrew, I asked for actually help in simulating this.

00:21:18.280 --> 00:21:23.320
 I got this lost on my end and never sent him design.

00:21:23.320 --> 00:21:28.240
 But the point of this talk, I guess,

00:21:28.240 --> 00:21:33.620
 is it is, in fact, possible to build things like this.

00:21:33.620 --> 00:21:37.000
 You need to be extremely careful about the tools you use.

00:21:37.000 --> 00:21:42.640
 In this case, the chip has a lot of built-in debugging features.

00:21:42.640 --> 00:21:45.920
 So yeah.

00:21:45.920 --> 00:21:48.800
 I kind of sprinted through my presentation.

00:21:48.800 --> 00:21:50.320
 I expected this to take 30 minutes.

00:21:50.320 --> 00:21:54.040
 It took 20 at best.

00:21:54.040 --> 00:21:59.400
 So I think there is a lot of room for questions.

00:21:59.400 --> 00:22:02.640
 I also have additional stories about building

00:22:02.640 --> 00:22:07.000
 this from parts that are not directly HF stuff.

00:22:07.000 --> 00:22:09.520
 I had those in the presentation, and I lost it on a broken

00:22:09.520 --> 00:22:10.200
 laptop.

00:22:10.200 --> 00:22:13.720
 I'm very sorry about that.

00:22:13.720 --> 00:22:14.840
 I have backups.

00:22:14.840 --> 00:22:16.200
 They are three months old.

00:22:16.200 --> 00:22:19.920
 [LAUGHTER]

00:22:19.920 --> 00:22:21.640
 Oops.

00:22:21.640 --> 00:22:23.120
 OK.

00:22:23.120 --> 00:22:27.320
 Let's try maybe to get started.

00:22:27.320 --> 00:22:29.840
 Does anyone have basic questions where I should just

00:22:29.840 --> 00:22:30.520
 explain some more?

00:22:30.520 --> 00:22:35.000
 Just quickly, before we get to the questions, maybe a big

00:22:35.000 --> 00:22:36.480
 round of applause for Equinox.

00:22:36.480 --> 00:22:43.040
 [APPLAUSE]

00:22:43.040 --> 00:22:46.800
 And if you have questions, the mic row--

00:22:46.800 --> 00:22:48.920
 or there will be a queue there for questions.

00:22:48.920 --> 00:22:51.200
 So go to the mic over there with the mic.

00:22:51.200 --> 00:22:52.080
 Yeah.

00:22:52.080 --> 00:22:55.360
 So thank you for the talk.

00:22:55.360 --> 00:22:56.440
 Great talk.

00:22:56.440 --> 00:22:59.960
 I've done a bit of HF in the past.

00:22:59.960 --> 00:23:07.160
 I would expect that going to 25 gigabits would be orders of

00:23:07.160 --> 00:23:09.480
 magnitude harder.

00:23:09.480 --> 00:23:13.560
 Do you think it would be possible to do it by hand like

00:23:13.560 --> 00:23:14.800
 you mostly did?

00:23:14.800 --> 00:23:26.760
 OK, for context, going to 25 gigabit is not--

00:23:26.760 --> 00:23:29.440
 there's some exponential scaling involved, which just

00:23:29.440 --> 00:23:31.920
 makes things extremely harder.

00:23:31.920 --> 00:23:34.960
 And I don't have the knowledge to answer your question.

00:23:34.960 --> 00:23:39.680
 So people have asked me if it's possible to build something

00:23:39.680 --> 00:23:43.840
 like this for 25 gigabit, especially because 4 times 25

00:23:43.840 --> 00:23:46.000
 is 100 gigabit link.

00:23:46.000 --> 00:23:49.000
 There are some chips around that I would

00:23:49.000 --> 00:23:50.880
 like to use for this.

00:23:50.880 --> 00:23:53.240
 The reason I haven't done it yet is--

00:23:53.240 --> 00:23:55.480
 and this is actually an important thing of this talk

00:23:55.480 --> 00:23:56.520
 that I wanted to do--

00:23:56.520 --> 00:23:58.800
 I want to give a kind of a negative shout out to one of

00:23:58.800 --> 00:24:01.560
 the vendors, in this case, Macom.

00:24:01.560 --> 00:24:03.560
 They have the perfect chip for this, but they don't give you

00:24:03.560 --> 00:24:04.600
 access to the data sheet.

00:24:04.600 --> 00:24:08.200
 You can find it by Googling, but it's only a basic sheet.

00:24:08.200 --> 00:24:11.080
 The chip is perfect for building something like this,

00:24:11.080 --> 00:24:13.520
 but they are extremely dismissive if you try to contact

00:24:13.520 --> 00:24:15.480
 them and try to get more information.

00:24:15.480 --> 00:24:20.120
 I may have another talk in two years, three years, about what

00:24:20.120 --> 00:24:23.200
 the story was with 25 gig, if it worked out.

00:24:25.720 --> 00:24:29.360
 Since at this point, KiCad is getting the support for--

00:24:29.360 --> 00:24:31.240
 I'm losing the microphone, sorry.

00:24:31.240 --> 00:24:33.480
 So since KiCad is getting the support for simulating the

00:24:33.480 --> 00:24:41.000
 boards, I would hope that this is sufficient to stretch the

00:24:41.000 --> 00:24:44.320
 possible some more, basically.

00:24:44.320 --> 00:24:45.560
 Sorry.

00:24:45.560 --> 00:24:49.760
 I honestly don't know.

00:24:49.760 --> 00:24:53.360
 I'm the person who is telling how far I was able to get

00:24:53.360 --> 00:24:56.760
 without knowing how it works.

00:24:56.760 --> 00:24:58.200
 We may need to find--

00:24:58.200 --> 00:25:00.240
 there were some people who raised their hands about being

00:25:00.240 --> 00:25:01.040
 HF engineers.

00:25:01.040 --> 00:25:05.120
 If someone else wants to throw in their two cents, I'd be

00:25:05.120 --> 00:25:08.360
 happy to hear.

00:25:08.360 --> 00:25:10.280
 And the next question?

00:25:10.280 --> 00:25:14.920
 Great talk, and you're a hero for attending this.

00:25:14.920 --> 00:25:19.080
 You had this really cool thing about the monitor of the chip

00:25:19.080 --> 00:25:23.160
 being used to give you the eye diagram.

00:25:23.160 --> 00:25:26.920
 Did you try to maybe do it with your own test equipment, to

00:25:26.920 --> 00:25:30.200
 hack the chip and just measure other devices' eye diagrams?

00:25:30.200 --> 00:25:37.400
 The chip has a built-in eye monitor.

00:25:37.400 --> 00:25:42.640
 However, the chip only works for certain ranges of signal.

00:25:42.640 --> 00:25:44.240
 It's a lot that it works for.

00:25:44.240 --> 00:25:49.440
 So the chip has a range of either 8 to 10 point something

00:25:49.440 --> 00:25:52.280
 or 9 to 12 point something gigabaud.

00:25:52.280 --> 00:25:55.960
 And it can divide that by 1, 2, 4, or 8.

00:25:55.960 --> 00:25:58.800
 So it works in kind of some areas.

00:25:58.800 --> 00:26:03.920
 You could connect that to get a rudimentary eye monitor.

00:26:03.920 --> 00:26:07.160
 I haven't thought about making my own test tool.

00:26:07.160 --> 00:26:13.080
 I was hoping that maybe someone would build an open

00:26:13.080 --> 00:26:17.000
 source VNA, which is the right tool for this.

00:26:17.000 --> 00:26:22.840
 It might also be possible to use, if you know, the nano VNA.

00:26:22.840 --> 00:26:25.680
 That's single-ended, but if you combine it with a balloon, it

00:26:25.680 --> 00:26:29.160
 might be possible to do differential measurements.

00:26:29.160 --> 00:26:31.760
 Again, so I don't feel comfortable building a test

00:26:31.760 --> 00:26:33.920
 tool myself with the limited understanding I have.

00:26:33.920 --> 00:26:37.600
 I feel like I can build an application, but I can't build

00:26:37.600 --> 00:26:39.640
 an actual measurement device.

00:26:39.640 --> 00:26:41.960
 Because if you build a measurement device, you should

00:26:41.960 --> 00:26:43.200
 know what you're doing.

00:26:43.200 --> 00:26:43.960
 You know?

00:26:43.960 --> 00:26:50.640
 That's my--

00:26:50.640 --> 00:26:52.040
 Oh.

00:26:52.040 --> 00:26:52.680
 Yeah, sure.

00:26:52.680 --> 00:26:55.880
 So for a proper test equipment, yeah, sure.

00:26:55.880 --> 00:26:59.040
 But just for hacking around, if you just have some sort of

00:26:59.040 --> 00:27:01.400
 breakout board to do this--

00:27:01.400 --> 00:27:04.240
 I wasn't even aware that these chips can do that.

00:27:04.240 --> 00:27:05.360
 So this is really cool.

00:27:05.360 --> 00:27:08.200
 You can take a copper direct attach cable and

00:27:08.200 --> 00:27:10.080
 just cut it open.

00:27:10.080 --> 00:27:13.320
 That should work if you have the right signal levels.

00:27:13.320 --> 00:27:15.880
 However, the signal levels are mostly the same anyway for all

00:27:15.880 --> 00:27:17.000
 of the high-speed stuff.

00:27:17.000 --> 00:27:21.720
 So that shouldn't be a problem, I would hope.

00:27:21.720 --> 00:27:22.320
 Yeah.

00:27:22.320 --> 00:27:24.280
 And then we have the next man.

00:27:24.280 --> 00:27:28.520
 So you said your motivation was like the faulty cables in

00:27:28.520 --> 00:27:33.760
 the CCH, but the CCH tear down and now rebuild.

00:27:33.760 --> 00:27:36.680
 Do you see any other cool stuff you can do?

00:27:36.680 --> 00:27:42.440
 They still have the same shitty fibers, unfortunately.

00:27:42.440 --> 00:27:46.680
 So if we go back to Hamburg, I'm not sure they have the

00:27:46.680 --> 00:27:48.120
 exact same type.

00:27:48.120 --> 00:27:50.600
 I do know that they still have multimode fiber.

00:27:50.600 --> 00:27:53.960
 And oh, I did mention that I wanted to go into a little bit

00:27:53.960 --> 00:27:56.200
 more detail why multimode fiber is a problem.

00:27:56.200 --> 00:28:03.640
 So normally, when the signal gets weaker, on the optical

00:28:03.640 --> 00:28:06.000
 signal-- this is the electrical signal, to be clear.

00:28:06.000 --> 00:28:09.480
 On the optical signal, you just get a closer and closer eye,

00:28:09.480 --> 00:28:11.800
 and at some point, the receiver doesn't work anymore.

00:28:11.800 --> 00:28:15.200
 With the shitty multimode fiber, you get horizontal eye

00:28:15.200 --> 00:28:18.280
 closure, because the signals take different paths, and they

00:28:18.280 --> 00:28:21.000
 get mushier and mushier on the time domain.

00:28:21.000 --> 00:28:24.360
 So the horizontal is the time on this.

00:28:24.360 --> 00:28:30.240
 I'm not sure if the CCH still has multimode fiber that is as

00:28:30.240 --> 00:28:32.520
 bad as it was before.

00:28:32.520 --> 00:28:36.160
 I only know that they put back multimode fiber in general.

00:28:36.160 --> 00:28:39.240
 I would hope that they did maybe replace it.

00:28:39.240 --> 00:28:39.880
 But yeah.

00:28:39.880 --> 00:28:43.920
 So if we go back to Hamburg, which seems likely, we may

00:28:43.920 --> 00:28:45.080
 want to use those again.

00:28:45.080 --> 00:28:45.680
 I don't know.

00:28:45.680 --> 00:28:47.720
 Maybe.

00:28:47.720 --> 00:28:52.520
 Apart from that, it is intended as a general fiber tool.

00:28:52.520 --> 00:28:54.800
 It does have batteries.

00:28:54.800 --> 00:28:56.640
 It's pocket-sized.

00:28:56.640 --> 00:29:01.560
 You can just put transceivers into it and use it as a helper

00:29:01.560 --> 00:29:03.840
 while you roll out your network.

00:29:03.840 --> 00:29:06.120
 We did have multiple occurrences at buildup during

00:29:06.120 --> 00:29:08.320
 camp where this would have been useful.

00:29:08.320 --> 00:29:10.600
 Unfortunately, this is not quite ready.

00:29:10.600 --> 00:29:11.720
 The hardware works.

00:29:11.720 --> 00:29:15.040
 I've connected my laptop to the internet through this at

00:29:15.040 --> 00:29:16.080
 10 gig.

00:29:16.080 --> 00:29:19.600
 So I know it works, except the software still needs to be

00:29:19.600 --> 00:29:21.600
 done.

00:29:21.600 --> 00:29:25.560
 Right now, I need to do I2C register writes to set it up

00:29:25.560 --> 00:29:26.400
 correctly.

00:29:26.400 --> 00:29:29.840
 And it wasn't quite ready, because I ran out of time in

00:29:29.840 --> 00:29:31.360
 the run-up to the camp.

00:29:31.360 --> 00:29:32.640
 So yeah.

00:29:32.640 --> 00:29:34.240
 I think it's useful as a tool.

00:29:34.240 --> 00:29:35.280
 Sorry, next question.

00:29:35.280 --> 00:29:36.160
 Yeah, hi.

00:29:36.160 --> 00:29:38.480
 Thanks for your talk and your nice project.

00:29:38.480 --> 00:29:41.800
 Following up on the 25 gig, you are lucky.

00:29:41.800 --> 00:29:46.400
 You go to optical transceivers, to SME converters.

00:29:46.400 --> 00:29:48.400
 Traces are all short.

00:29:48.400 --> 00:29:50.920
 It's completely different when you do a layout that actually

00:29:50.920 --> 00:29:53.800
 goes then to 100 meter copper.

00:29:53.800 --> 00:29:57.360
 So this helps in your case.

00:29:57.360 --> 00:30:00.000
 Your proper job in analyzing and being very careful,

00:30:00.000 --> 00:30:03.200
 reading all the stuff, you do the same for 25 gig.

00:30:03.200 --> 00:30:07.080
 Probably you have to switch away from FR4 space material

00:30:07.080 --> 00:30:10.840
 to get more RF ready.

00:30:10.840 --> 00:30:12.120
 But it's doable.

00:30:12.120 --> 00:30:16.440
 You can still do it with KiCAD and analyze, with other

00:30:16.440 --> 00:30:18.880
 FEM tools, which are open source around.

00:30:18.880 --> 00:30:19.960
 It's just more work.

00:30:19.960 --> 00:30:24.480
 And you need to select properly your PCB when on all the

00:30:24.480 --> 00:30:28.200
 impedance control, which just costs more money.

00:30:28.200 --> 00:30:32.640
 Possibly this is going to the more debug features, as you

00:30:32.640 --> 00:30:37.160
 said, your chip has a built-in eye monitor, but for very

00:30:37.160 --> 00:30:39.000
 limited frequencies.

00:30:39.000 --> 00:30:42.400
 And you don't have the bit error rate tester.

00:30:42.400 --> 00:30:45.320
 If you are interested in doing debugging with these kind of

00:30:45.320 --> 00:30:48.640
 features, go for FPGA development boards, which have

00:30:48.640 --> 00:30:51.800
 SFP modules.

00:30:51.800 --> 00:30:53.200
 Then you don't have open source tools.

00:30:53.200 --> 00:30:57.200
 Then you just install the tool chain from the render.

00:30:57.200 --> 00:31:03.360
 From there you have eye belt or smart belt features inside

00:31:03.360 --> 00:31:08.200
 the transceivers of the FPGAs by a development kit with a

00:31:08.200 --> 00:31:12.120
 proper layout and done and connected to here.

00:31:12.120 --> 00:31:15.120
 And then you can still do loopback tests and get all

00:31:15.120 --> 00:31:16.440
 your features done.

00:31:16.440 --> 00:31:18.560
 I think this is a really long question.

00:31:18.560 --> 00:31:20.480
 But you have to finally the question.

00:31:20.480 --> 00:31:22.360
 OK.

00:31:22.360 --> 00:31:26.080
 There are some FPGAs where I think you can, in fact, also

00:31:26.080 --> 00:31:29.120
 get an eye diagram from the debug software.

00:31:29.120 --> 00:31:32.120
 Like, yeah, OK.

00:31:32.120 --> 00:31:35.200
 I know these features exist.

00:31:35.200 --> 00:31:37.720
 So if other people want to know more about this, I guess

00:31:37.720 --> 00:31:40.120
 they can come to you.

00:31:40.120 --> 00:31:42.120
 And yeah, the vendors certainly know how to make

00:31:42.120 --> 00:31:44.000
 their boards for their dev kits, because they want to

00:31:44.000 --> 00:31:45.760
 sell their hardware.

00:31:45.760 --> 00:31:46.720
 Next question.

00:31:46.720 --> 00:31:49.040
 Maybe just one very short question.

00:31:49.040 --> 00:31:51.720
 Did you try talking about the VNA stuff?

00:31:51.720 --> 00:31:56.040
 Did you try this in VNA front end, IC from analog, ADL,

00:31:56.040 --> 00:31:58.000
 5960?

00:31:58.000 --> 00:32:00.760
 I have become aware that it exists.

00:32:00.760 --> 00:32:02.720
 I haven't looked at any of the details yet.

00:32:02.720 --> 00:32:09.400
 It's the same comment as before.

00:32:09.400 --> 00:32:12.000
 I'm not sure I have enough knowledge to look at measuring

00:32:12.000 --> 00:32:14.280
 equipment, because that analog device ship is really

00:32:14.280 --> 00:32:17.280
 targeted at building a VNA.

00:32:17.280 --> 00:32:21.400
 And I feel like I don't have enough knowledge to do that.

00:32:21.400 --> 00:32:25.200
 I would hope that in general, someone will build an open

00:32:25.200 --> 00:32:25.920
 source tool like that.

00:32:25.920 --> 00:32:28.600
 Maybe the nano VNA people will just make, I think, version

00:32:28.600 --> 00:32:30.560
 6's next one.

00:32:30.560 --> 00:32:33.640
 But that would be very cool.

00:32:33.640 --> 00:32:37.040
 Oh, I did forget a comment to the previous--

00:32:37.040 --> 00:32:40.840
 this is also manufactured by GLCPCB, which is cheap

00:32:40.840 --> 00:32:42.680
 Chinese PCBs.

00:32:42.680 --> 00:32:47.920
 So that's another comment on the feasibility of this.

00:32:47.920 --> 00:32:54.240
 With 10 gig, you can get away with using cheap, mostly

00:32:54.240 --> 00:32:56.760
 specified PCBs.

00:32:56.760 --> 00:32:59.880
 The funny thing is that GLCPCB changed their specification

00:32:59.880 --> 00:33:03.880
 of their layer stack ups midway through me building this,

00:33:03.880 --> 00:33:06.160
 which is not nice either.

00:33:06.160 --> 00:33:08.600
 But this is certainly not precision PCBs.

00:33:08.600 --> 00:33:13.920
 This is just a cheap four layer board, which also four layer

00:33:13.920 --> 00:33:15.720
 boards are just cheap enough these days.

00:33:15.720 --> 00:33:17.600
 Don't even try to do this with a two layer board.

00:33:17.600 --> 00:33:20.080
 It's not going to work, I'm pretty sure.

00:33:20.080 --> 00:33:21.320
 Next question.

00:33:21.320 --> 00:33:21.800
 Yeah.

00:33:21.800 --> 00:33:25.560
 I think this is probably the last question.

00:33:25.560 --> 00:33:30.360
 And then if people want to find you after this to talk to you,

00:33:30.360 --> 00:33:33.080
 where can they find you?

00:33:33.080 --> 00:33:34.280
 You can find me in the knock.

00:33:34.280 --> 00:33:35.680
 I do have 10 more minutes, right?

00:33:35.680 --> 00:33:36.760
 Yeah, you have 10 more minutes.

00:33:36.760 --> 00:33:37.240
 Yeah.

00:33:37.240 --> 00:33:38.880
 Also, you can--

00:33:38.880 --> 00:33:41.760
 I think we can just fill with questions, right?

00:33:41.760 --> 00:33:44.920
 I mean, there seems to be one in queue, so.

00:33:44.920 --> 00:33:46.960
 Yeah, I just have a short comment about something you

00:33:46.960 --> 00:33:48.160
 just said.

00:33:48.160 --> 00:33:50.880
 You said that the FPGA vendors know how to build their

00:33:50.880 --> 00:33:52.920
 dev boards because they want to sell them.

00:33:52.920 --> 00:33:54.160
 Don't count on it.

00:33:54.160 --> 00:33:55.000
 [LAUGHTER]

00:33:55.000 --> 00:33:57.760
 OK.

00:33:57.760 --> 00:33:59.640
 OK.

00:33:59.640 --> 00:34:00.920
 Sure.

00:34:00.920 --> 00:34:03.520
 Well, switch vendors don't know how to build switches either.

00:34:03.520 --> 00:34:04.760
 I can tell you from experience.

00:34:04.760 --> 00:34:07.960
 Yeah.

00:34:07.960 --> 00:34:10.080
 Yeah.

00:34:10.080 --> 00:34:12.600
 Considering that I have 10 minutes left, I can't just go

00:34:12.600 --> 00:34:15.600
 into random other stuff.

00:34:15.600 --> 00:34:16.840
 Because-- oh, sorry.

00:34:16.840 --> 00:34:18.080
 There's one more.

00:34:18.080 --> 00:34:20.520
 Yeah, so you asked for comments from other people

00:34:20.520 --> 00:34:24.120
 who had experience doing this sort of thing.

00:34:24.120 --> 00:34:28.040
 I did a HDMI matrix switch.

00:34:28.040 --> 00:34:30.840
 And then a display port matrix switch.

00:34:30.840 --> 00:34:34.240
 And had very similar experiences to yours, except

00:34:34.240 --> 00:34:36.720
 mostly things just work.

00:34:36.720 --> 00:34:38.000
 Yeah.

00:34:38.000 --> 00:34:40.680
 And I think it's to do with receiver quality.

00:34:40.680 --> 00:34:42.760
 Yeah.

00:34:42.760 --> 00:34:47.640
 Did you have some measurement that you could do to get some

00:34:47.640 --> 00:34:51.160
 eye diagram or just some measure of whether you were

00:34:51.160 --> 00:34:54.960
 barely working or working well?

00:34:54.960 --> 00:34:58.280
 So I did actually do oscilloscope measurements at

00:34:58.280 --> 00:35:00.640
 low frequencies, which told me something.

00:35:00.640 --> 00:35:02.640
 And then I sent the board to Andrew, which

00:35:02.640 --> 00:35:05.120
 told me a lot more.

00:35:05.120 --> 00:35:11.680
 There is actually an HDMI re-timer chip, which can do eye

00:35:11.680 --> 00:35:12.600
 diagrams.

00:35:12.600 --> 00:35:15.440
 But it's out of stock.

00:35:15.440 --> 00:35:18.840
 But once it's back in stock, I'm also planning to make

00:35:18.840 --> 00:35:19.800
 measurements go like this.

00:35:19.800 --> 00:35:20.960
 Yeah.

00:35:20.960 --> 00:35:24.240
 This thing got delayed by two years as well, because the

00:35:24.240 --> 00:35:26.560
 microcontroller was just not available, and other chips were

00:35:26.560 --> 00:35:27.400
 just not available.

00:35:27.400 --> 00:35:32.320
 And yeah, luckily that has mostly come to an end.

00:35:32.320 --> 00:35:39.280
 If people are still interested, there's actually

00:35:39.280 --> 00:35:40.720
 two boards in this.

00:35:40.720 --> 00:35:43.520
 And as it turns out, most of the problems in building this

00:35:43.520 --> 00:35:46.680
 actually came from the power supply and building an

00:35:46.680 --> 00:35:53.640
 overcomplicated environment around all of the HF stuff.

00:35:53.640 --> 00:35:57.640
 I tried to build this as power-savvy as possible, which

00:35:57.640 --> 00:35:59.200
 caused more problems.

00:35:59.200 --> 00:36:02.320
 It has battery charging, which has caused problems.

00:36:02.320 --> 00:36:07.080
 So I think the closing sentence here is maybe try

00:36:07.080 --> 00:36:08.920
 one thing first.

00:36:08.920 --> 00:36:12.280
 The HF stuff can definitely be done.

00:36:12.280 --> 00:36:14.720
 And don't forget the other stuff.

00:36:14.720 --> 00:36:16.800
 If I had been a bit more careful, I think I could have

00:36:16.800 --> 00:36:18.840
 saved myself quite a few revisions.

00:36:18.840 --> 00:36:22.800
 I think this is revision five or six of this board as far as

00:36:22.800 --> 00:36:24.320
 manufacturing goes.

00:36:24.320 --> 00:36:26.960
 I do have prototypes with me if people want to go look at

00:36:26.960 --> 00:36:28.840
 the actual PCB.

00:36:28.840 --> 00:36:34.520
 You can find me in the NOC, which is over there near the

00:36:34.520 --> 00:36:36.000
 fence to the camping area.

00:36:36.000 --> 00:36:37.360
 It's a white tent.

00:36:37.360 --> 00:36:41.120
 Please be polite/restrained when entering the tent.

00:36:41.120 --> 00:36:43.800
 It's possible that people are working to debug the network.

00:36:43.800 --> 00:36:46.200
 So if there is a rush of activity, then maybe come back

00:36:46.200 --> 00:36:48.960
 a little bit later.

00:36:48.960 --> 00:36:51.480
 I haven't actually pushed this out on GitHub yet.

00:36:51.480 --> 00:36:54.280
 I plan to do that.

00:36:54.280 --> 00:36:58.800
 You can find me on Mastodon Equinox at chaos.social.

00:36:58.800 --> 00:37:04.520
 My GitHub is linked from Mastodon.

00:37:04.520 --> 00:37:07.920
 And I think that's--

00:37:07.920 --> 00:37:08.360
 cool.

00:37:08.360 --> 00:37:09.800
 Thanks for attending.

00:37:09.800 --> 00:37:11.040
 Big round of applause.

00:37:11.040 --> 00:37:18.800
 [APPLAUSE]

00:37:18.800 --> 00:37:23.760
 [MUSIC PLAYING]

