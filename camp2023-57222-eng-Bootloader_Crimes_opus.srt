1
00:00:00,000 --> 00:00:10,000
 [MUSIC]

2
00:00:10,000 --> 00:00:32,640
 Thanks everybody for being here in the shade.

3
00:00:32,640 --> 00:00:34,920
 I hope it's not too hot.

4
00:00:34,920 --> 00:00:37,480
 So let's get started with the talk.

5
00:00:37,480 --> 00:00:41,320
 So yeah, bootload of crimes, building disposable Windows VMs.

6
00:00:41,320 --> 00:00:43,000
 What is this all about?

7
00:00:43,000 --> 00:00:45,760
 So a bit of motivation, why are we even doing this?

8
00:00:45,760 --> 00:00:50,280
 So I use Arch, by the way, on the desktop even.

9
00:00:50,280 --> 00:00:54,880
 But as mentioned, sometimes you cannot get around Windows.

10
00:00:54,880 --> 00:00:57,720
 Maybe you have some application that you cannot run in Wine.

11
00:00:57,720 --> 00:00:58,880
 It doesn't work right.

12
00:00:58,880 --> 00:01:02,280
 Or you maybe don't even want to run it on your main system

13
00:01:02,280 --> 00:01:05,400
 because it's some not very trusted software,

14
00:01:05,400 --> 00:01:07,960
 and you just want to analyze it, poke at it, or you have some

15
00:01:07,960 --> 00:01:11,360
 proprietary software or hardware that requires Windows

16
00:01:11,360 --> 00:01:15,640
 software that you maybe want to reverse engineer and make work

17
00:01:15,640 --> 00:01:17,600
 on Linux.

18
00:01:17,600 --> 00:01:21,760
 This happens to me, and I think at camp, it probably happens to

19
00:01:21,760 --> 00:01:22,640
 most people.

20
00:01:22,640 --> 00:01:24,400
 But only sometimes.

21
00:01:24,400 --> 00:01:25,400
 You don't need it every day.

22
00:01:25,400 --> 00:01:30,040
 But every so often, once every few weeks, or months even.

23
00:01:30,040 --> 00:01:32,600
 But then, sure, use a VM.

24
00:01:32,600 --> 00:01:33,520
 We have the right tools.

25
00:01:33,520 --> 00:01:38,120
 But I guess maybe show of hands, who has a Windows VM that

26
00:01:38,120 --> 00:01:43,240
 just lies around that they haven't booted in a while?

27
00:01:43,240 --> 00:01:46,920
 And when you boot it, keep your hand up if it's a pleasant

28
00:01:46,920 --> 00:01:49,080
 experience.

29
00:01:49,080 --> 00:01:52,960
 Yeah, the one guy in the back, he has it all figured out.

30
00:01:52,960 --> 00:01:56,160
 So yeah, you boot it, and then it wants to update.

31
00:01:56,160 --> 00:01:59,400
 Or I don't know, some new features have been pushed that

32
00:01:59,400 --> 00:02:00,360
 you now have to deal with.

33
00:02:00,360 --> 00:02:01,920
 Or activation has expired.

34
00:02:01,920 --> 00:02:04,720
 Or generally, something else has broke.

35
00:02:04,720 --> 00:02:07,400
 Sure, you can keep a Windows VM around.

36
00:02:07,400 --> 00:02:11,120
 And if this is maybe a day job, and you maintain it, or

37
00:02:11,120 --> 00:02:13,480
 have lots of snapshots, whatever, this might be

38
00:02:13,480 --> 00:02:14,080
 pleasant.

39
00:02:14,080 --> 00:02:16,880
 But for occasional use, maybe not so much.

40
00:02:16,880 --> 00:02:19,880
 So sure, just do a fresh install.

41
00:02:19,880 --> 00:02:23,320
 But for occasional use, it's a lot of quick clicking,

42
00:02:23,320 --> 00:02:24,080
 waiting.

43
00:02:24,080 --> 00:02:26,080
 You need to configure all the things.

44
00:02:26,080 --> 00:02:28,680
 Install all the tools, software again.

45
00:02:28,680 --> 00:02:30,360
 Enable file extensions.

46
00:02:30,360 --> 00:02:32,160
 We've probably all been there.

47
00:02:32,160 --> 00:02:36,680
 And declutter, remove whatever useful features Microsoft

48
00:02:36,680 --> 00:02:38,760
 added in the meantime.

49
00:02:38,760 --> 00:02:42,200
 But we're hackers, so when in doubt, automate.

50
00:02:42,200 --> 00:02:44,920
 And so this is what this is all about.

51
00:02:44,920 --> 00:02:47,960
 So there's some existing installations.

52
00:02:47,960 --> 00:02:52,600
 People have instrumented or automated Windows

53
00:02:52,600 --> 00:02:53,440
 deployments.

54
00:02:53,440 --> 00:02:56,840
 There's more or less open source solutions.

55
00:02:56,840 --> 00:03:00,800
 There's Box Starter, which is some tool that you can put on

56
00:03:00,800 --> 00:03:03,960
 a Windows machine that is already installed.

57
00:03:03,960 --> 00:03:07,400
 And it will continue to set up your environment.

58
00:03:07,400 --> 00:03:10,880
 HashiCorp Packer, it's used for building images for

59
00:03:10,880 --> 00:03:13,440
 Vagrant, if you're familiar with that.

60
00:03:13,440 --> 00:03:14,400
 It can provision Linux.

61
00:03:14,400 --> 00:03:17,560
 But they also have some very nice templates on

62
00:03:17,560 --> 00:03:19,000
 provisioning Linux.

63
00:03:19,000 --> 00:03:22,400
 You could remaster an ISO and put some answer files in

64
00:03:22,400 --> 00:03:25,080
 there, so it installs itself.

65
00:03:25,080 --> 00:03:27,200
 Yeah, as mentioned, answer files.

66
00:03:27,200 --> 00:03:28,480
 Ansible has support for it.

67
00:03:28,480 --> 00:03:29,880
 So you could write some playbooks.

68
00:03:29,880 --> 00:03:34,040
 Or Forman deployment solution also does it.

69
00:03:34,040 --> 00:03:35,400
 But I looked at all of these.

70
00:03:35,400 --> 00:03:37,040
 And some of these, they have some nice concept.

71
00:03:37,040 --> 00:03:38,960
 But now these really work for me.

72
00:03:38,960 --> 00:03:42,640
 So obligatory, XKCD reference.

73
00:03:42,640 --> 00:03:44,880
 Already so much stuff, but we need more.

74
00:03:44,880 --> 00:03:48,320
 And surely this will fix all, at least my problems.

75
00:03:48,320 --> 00:03:49,680
 So let's see.

76
00:03:49,680 --> 00:03:50,840
 So some design goals.

77
00:03:50,840 --> 00:03:52,720
 So I want it to be really easy to use.

78
00:03:52,720 --> 00:03:54,720
 I don't want to write YAML or JSON or whatever.

79
00:03:54,720 --> 00:03:56,520
 I just want to use a website.

80
00:03:56,520 --> 00:04:00,440
 So I can send it to someone and they can use it without

81
00:04:00,440 --> 00:04:03,920
 installing any software or cloning a Git repo.

82
00:04:03,920 --> 00:04:06,920
 I want to import all the settings, select some check

83
00:04:06,920 --> 00:04:09,200
 boxes about features, maybe configure my

84
00:04:09,200 --> 00:04:11,280
 user name, time zone, whatever.

85
00:04:11,280 --> 00:04:15,880
 And maybe even save and load a preset or even share a preset

86
00:04:15,880 --> 00:04:17,880
 with a friend.

87
00:04:17,880 --> 00:04:18,360
 Targeting.

88
00:04:18,360 --> 00:04:20,360
 So I've been working on this project on and off for a

89
00:04:20,360 --> 00:04:23,680
 while, so initially maybe it was 7.10.

90
00:04:23,680 --> 00:04:26,760
 These days it's 11 because it's the latest release and the

91
00:04:26,760 --> 00:04:29,200
 one that will be supported for the longest.

92
00:04:29,200 --> 00:04:32,480
 And hyper-verses, yeah, I work with VirtualBlocks, QEMO.

93
00:04:32,480 --> 00:04:36,920
 But surely it should run on all of them, really.

94
00:04:36,920 --> 00:04:40,840
 So the question is, how do we do this?

95
00:04:40,840 --> 00:04:45,200
 We could just build an image on a server, have a beefy

96
00:04:45,200 --> 00:04:48,760
 server that can create an image, provision it, and then

97
00:04:48,760 --> 00:04:50,960
 we download the final image.

98
00:04:50,960 --> 00:04:54,320
 That's maybe fine for myself, but it runs into

99
00:04:54,320 --> 00:04:55,960
 some issues.

100
00:04:55,960 --> 00:05:00,120
 So there's obviously IP copyright troubles if I offer

101
00:05:00,120 --> 00:05:01,560
 finished Windows image.

102
00:05:01,560 --> 00:05:04,400
 There's intellectual property by Microsoft.

103
00:05:04,400 --> 00:05:07,120
 They might not be so happy with me distributing that.

104
00:05:07,120 --> 00:05:08,600
 Also, it doesn't scale.

105
00:05:08,600 --> 00:05:11,640
 It's rather resource intensive.

106
00:05:11,640 --> 00:05:15,560
 I need a lot of resources to provision VMs on my server.

107
00:05:15,560 --> 00:05:19,000
 The images I will ship will incur a lot of traffic.

108
00:05:19,000 --> 00:05:22,360
 So that's not ideal if I want to have many people use it.

109
00:05:22,360 --> 00:05:27,160
 So the idea is here, just run it locally, but have it

110
00:05:27,160 --> 00:05:28,520
 provision itself locally.

111
00:05:28,520 --> 00:05:31,640
 But how do we do that?

112
00:05:31,640 --> 00:05:35,000
 So the first step, this we can do in your browser.

113
00:05:35,000 --> 00:05:36,400
 So you fill out some form.

114
00:05:36,400 --> 00:05:40,440
 And from that, we'll generate some configuration file.

115
00:05:40,440 --> 00:05:43,840
 And then we'll just inject that into a very tiny, like

116
00:05:43,840 --> 00:05:48,080
 15 megabyte disk image, just copying it in there with an

117
00:05:48,080 --> 00:05:49,360
 array operation.

118
00:05:49,360 --> 00:05:53,440
 And we'll also generate this OVF, like manifest files in

119
00:05:53,440 --> 00:05:57,960
 XML, with some of your VM's name and memory size, whatever.

120
00:05:57,960 --> 00:05:59,840
 And then we'll just throw these into a tar.

121
00:05:59,840 --> 00:06:04,160
 And that generates an OVA file, which is just this

122
00:06:04,160 --> 00:06:05,840
 appliance container.

123
00:06:05,840 --> 00:06:09,560
 And you can import it in, I think, VirtualBox.

124
00:06:09,560 --> 00:06:11,120
 VMWare also has support in it.

125
00:06:11,120 --> 00:06:15,320
 Or alternatively, you could just get the disk image out of

126
00:06:15,320 --> 00:06:18,200
 there again and maybe lose some of the metadata.

127
00:06:18,200 --> 00:06:21,120
 And this we can all do in the browser.

128
00:06:21,120 --> 00:06:23,400
 On the client, we don't even need server code.

129
00:06:23,400 --> 00:06:27,360
 We can just serve some static files, a few megabytes.

130
00:06:27,360 --> 00:06:28,920
 And then you get this OVA.

131
00:06:28,920 --> 00:06:31,280
 OK, but what is in there?

132
00:06:31,280 --> 00:06:32,520
 So you boot it.

133
00:06:32,520 --> 00:06:35,520
 And this is the initial state of the disk.

134
00:06:35,520 --> 00:06:37,880
 So you see we have this little boot partition.

135
00:06:37,880 --> 00:06:38,960
 It has a bunch of stuff in it.

136
00:06:38,960 --> 00:06:41,560
 And we have an empty NTFS partition.

137
00:06:41,560 --> 00:06:43,120
 So there's a kernel in there.

138
00:06:43,120 --> 00:06:44,440
 We can boot it with some boot loader,

139
00:06:44,440 --> 00:06:45,920
 just as Linux in this case.

140
00:06:45,920 --> 00:06:49,520
 And in this case, it's just some stock Alpine kernel

141
00:06:49,520 --> 00:06:51,200
 pre-compiled for VMs.

142
00:06:51,200 --> 00:06:52,720
 You could do your own with build root and

143
00:06:52,720 --> 00:06:54,000
 make it even smaller.

144
00:06:54,000 --> 00:06:58,960
 But taking binaries from Alpine is just sufficient.

145
00:06:58,960 --> 00:07:00,320
 And we remix it a bit.

146
00:07:00,320 --> 00:07:03,440
 There's an initial RAM disk image in there that's very

147
00:07:03,440 --> 00:07:06,960
 tiny, it's just BusyBox and cURL, essentially.

148
00:07:06,960 --> 00:07:10,720
 And some other configuration files and shell scripts.

149
00:07:10,720 --> 00:07:13,520
 And you can see highlighted, your user configuration that

150
00:07:13,520 --> 00:07:15,000
 we injected in the browser.

151
00:07:15,000 --> 00:07:18,440
 So that is the only part that is unique.

152
00:07:18,440 --> 00:07:20,480
 And so you boot this.

153
00:07:20,480 --> 00:07:25,040
 And you see, OK, it's a very minimal Linux thing booting.

154
00:07:25,040 --> 00:07:26,480
 There's some tiny user space.

155
00:07:26,480 --> 00:07:27,840
 And it drops you into--

156
00:07:27,840 --> 00:07:29,720
 it automatically executes a shell script and does some

157
00:07:29,720 --> 00:07:30,440
 things.

158
00:07:30,440 --> 00:07:32,840
 OK, so what does it do?

159
00:07:32,840 --> 00:07:35,520
 So it does some DHCP, sets up networking, sets up your

160
00:07:35,520 --> 00:07:39,880
 basic stuff that you need to run--

161
00:07:39,880 --> 00:07:43,240
 drivers, devices, monster disks, whatever.

162
00:07:43,240 --> 00:07:45,440
 And first things first, well, we need to get a Windows

163
00:07:45,440 --> 00:07:46,080
 installation, right?

164
00:07:46,080 --> 00:07:48,280
 We didn't want to ship that, so we need to get it from

165
00:07:48,280 --> 00:07:49,760
 somewhere.

166
00:07:49,760 --> 00:07:53,960
 Thankfully, Microsoft has a valuation image for--

167
00:07:53,960 --> 00:07:56,040
 well, these days, Windows 11, but I think they also have it

168
00:07:56,040 --> 00:07:58,440
 for Windows 10, even still online.

169
00:07:58,440 --> 00:08:00,280
 And you can just freely download that if you know the

170
00:08:00,280 --> 00:08:00,680
 URL.

171
00:08:00,680 --> 00:08:03,400
 So we just fetch that with cURL and put it into our

172
00:08:03,400 --> 00:08:04,640
 scratch space, right?

173
00:08:04,640 --> 00:08:07,720
 And we can then also validate the checksum to

174
00:08:07,720 --> 00:08:10,640
 see that it's legit.

175
00:08:10,640 --> 00:08:12,920
 So in the next step, we start to mount it.

176
00:08:12,920 --> 00:08:14,240
 We extract some things.

177
00:08:14,240 --> 00:08:18,640
 So you can see on the left, we extract some boot files and

178
00:08:18,640 --> 00:08:20,520
 the install file.

179
00:08:20,520 --> 00:08:23,440
 So the install file is basically what contains the

180
00:08:23,440 --> 00:08:25,520
 data we need for our Windows installation.

181
00:08:25,520 --> 00:08:27,360
 And the boot files are kind of this live

182
00:08:27,360 --> 00:08:29,920
 installation environment.

183
00:08:29,920 --> 00:08:32,800
 So you can see these are in WIM files.

184
00:08:32,800 --> 00:08:34,280
 So what are WIM files, really?

185
00:08:34,280 --> 00:08:37,280
 I mean, maybe if you've dealt with provisioning Windows

186
00:08:37,280 --> 00:08:39,320
 before, you've seen these.

187
00:08:39,320 --> 00:08:42,560
 So Microsoft uses these for installing and deploying

188
00:08:42,560 --> 00:08:44,120
 operating systems since Vista.

189
00:08:44,120 --> 00:08:47,840
 So they saw copying hundreds of thousands of small little

190
00:08:47,840 --> 00:08:50,440
 files from install media to the disk is cumbersome.

191
00:08:50,440 --> 00:08:53,360
 Let's just package it somehow.

192
00:08:53,360 --> 00:08:57,040
 So the title says it's an imaging format.

193
00:08:57,040 --> 00:08:58,240
 It's not like UDD disk.

194
00:08:58,240 --> 00:09:02,120
 It's not just blocks from a block device.

195
00:09:02,120 --> 00:09:02,960
 But it is files.

196
00:09:02,960 --> 00:09:05,760
 So it's rather more like a zip or a tar, really.

197
00:09:05,760 --> 00:09:07,960
 But it has some additional features, right?

198
00:09:07,960 --> 00:09:10,560
 It has all the metadata, all the Windows security

199
00:09:10,560 --> 00:09:16,640
 descriptors, whatever, fancy NTFS special file types,

200
00:09:16,640 --> 00:09:20,200
 whatever, that can all be persisted into a WIM.

201
00:09:20,200 --> 00:09:21,640
 And you can have multiple images, right?

202
00:09:21,640 --> 00:09:24,160
 So maybe if you have install media that has different

203
00:09:24,160 --> 00:09:28,800
 versions of Windows, you can all package them into one

204
00:09:28,800 --> 00:09:29,560
 WIM file.

205
00:09:29,560 --> 00:09:31,720
 But you can deduplicate files, because these versions, they

206
00:09:31,720 --> 00:09:34,480
 will have a lot of the files that are identical.

207
00:09:34,480 --> 00:09:37,640
 So it'll just be pointers to the same data, essentially.

208
00:09:37,640 --> 00:09:40,040
 And you can compress it in various ways.

209
00:09:40,040 --> 00:09:42,560
 You can also split it, I guess, if you want to keep your

210
00:09:42,560 --> 00:09:46,760
 WIMs on Fed42 or whatever, or another file system that

211
00:09:46,760 --> 00:09:50,480
 doesn't support arbitrarily large files.

212
00:09:50,480 --> 00:09:52,440
 You can split them up.

213
00:09:52,440 --> 00:09:55,360
 Also, you can boot them, the installer, or if you have a

214
00:09:55,360 --> 00:10:00,880
 recovery system, you can directly tell a bootloader,

215
00:10:00,880 --> 00:10:04,400
 one of Microsoft's bootloaders, to find the right

216
00:10:04,400 --> 00:10:07,840
 files in this WIM and then boot into it.

217
00:10:07,840 --> 00:10:10,160
 And you can manipulate it on Linux, for example, with

218
00:10:10,160 --> 00:10:10,840
 WIM.

219
00:10:10,840 --> 00:10:16,720
 Microsoft in Windows also has some tools for it.

220
00:10:16,720 --> 00:10:23,320
 And I think if you have a package manager, then you can

221
00:10:23,320 --> 00:10:24,480
 likely also use that.

222
00:10:24,480 --> 00:10:29,480
 In the end, it's really a fancy zip file, more or less.

223
00:10:29,480 --> 00:10:32,040
 So OK, now we have these WIM files on disk.

224
00:10:32,040 --> 00:10:33,520
 We need to do a bit more.

225
00:10:33,520 --> 00:10:36,200
 We have the user configuration and some templates.

226
00:10:36,200 --> 00:10:39,200
 So from these templates, we generate some more files that

227
00:10:39,200 --> 00:10:41,680
 are used, the answer file and maybe a PowerShell script that

228
00:10:41,680 --> 00:10:44,120
 I use later during the install.

229
00:10:44,120 --> 00:10:45,760
 And then we fetch WIM boot.

230
00:10:45,760 --> 00:10:48,600
 This is from the IPXE guys.

231
00:10:48,600 --> 00:10:52,840
 And it's basically an open source bootloader that we can

232
00:10:52,840 --> 00:10:54,720
 use to--

233
00:10:54,720 --> 00:10:56,560
 as mentioned previously, we can boot WIM files.

234
00:10:56,560 --> 00:11:02,560
 So this is a component that we can use to boot into this

235
00:11:02,560 --> 00:11:06,320
 boot.wim from the X4 partition even.

236
00:11:06,320 --> 00:11:07,760
 And yeah, there's some other files in there.

237
00:11:07,760 --> 00:11:10,360
 We have an ini and a but file, which are used in the next

238
00:11:10,360 --> 00:11:13,600
 stage, where we actually boot into that

239
00:11:13,600 --> 00:11:16,320
 installation environment.

240
00:11:16,320 --> 00:11:19,120
 So we tell Syslinux, hey, don't go to the kernel anymore.

241
00:11:19,120 --> 00:11:22,280
 Go to WIM boot instead.

242
00:11:22,280 --> 00:11:25,040
 And please boot these files that we dropped on the X4

243
00:11:25,040 --> 00:11:25,800
 partition.

244
00:11:25,800 --> 00:11:29,480
 And we end up in the so-called WIMPE, Windows Pre-Installation

245
00:11:29,480 --> 00:11:30,160
 Environment.

246
00:11:30,160 --> 00:11:33,280
 This is if you pop in Install Media, what you see.

247
00:11:33,280 --> 00:11:36,280
 And instead of the installer, you just get a shell.

248
00:11:36,280 --> 00:11:41,880
 And the shell script we have in there gets run.

249
00:11:41,880 --> 00:11:43,760
 So what do we do in that shell script?

250
00:11:43,760 --> 00:11:46,200
 So we continue the installation process, because

251
00:11:46,200 --> 00:11:51,000
 we now rely on a few tools that are just available from

252
00:11:51,000 --> 00:11:53,720
 Microsoft, need to be run in a Windows environment.

253
00:11:53,720 --> 00:11:57,640
 So essentially, we now have switched, after rebooting, from

254
00:11:57,640 --> 00:12:01,840
 the live Alpine into a live Windows environment.

255
00:12:01,840 --> 00:12:04,520
 So first thing is we get rid of that X4 partition.

256
00:12:04,520 --> 00:12:06,600
 We did boot from it, but now we're running from memory.

257
00:12:06,600 --> 00:12:07,760
 So it doesn't matter.

258
00:12:07,760 --> 00:12:09,360
 You can do it with disk part.

259
00:12:09,360 --> 00:12:13,760
 It's like FDisk, but for Windows, or for Microsoft

260
00:12:13,760 --> 00:12:17,240
 command line partition editor.

261
00:12:17,240 --> 00:12:21,920
 We create a new partition for our final installation.

262
00:12:21,920 --> 00:12:25,000
 So it's only occupying half the space of the image right

263
00:12:25,000 --> 00:12:27,280
 now, because we still have our scratch partition.

264
00:12:27,280 --> 00:12:31,520
 We create a file system and then mount it, so mount it

265
00:12:31,520 --> 00:12:33,600
 under W, like Windows.

266
00:12:33,600 --> 00:12:36,960
 And then we start doing the deploy.

267
00:12:36,960 --> 00:12:40,800
 So with this Dism, you say apply image, and that is

268
00:12:40,800 --> 00:12:42,480
 essentially unpacking.

269
00:12:42,480 --> 00:12:46,680
 It just takes all the data that is installed, and just

270
00:12:46,680 --> 00:12:48,440
 shovels it on the partition.

271
00:12:48,440 --> 00:12:51,800
 And you can see the typical directories appearing that

272
00:12:51,800 --> 00:12:53,880
 would happen in a Windows installation.

273
00:12:53,880 --> 00:12:58,320
 And we also copy our answer files over, so they reside on

274
00:12:58,320 --> 00:13:01,920
 there, and we can delete the scratch partition and then

275
00:13:01,920 --> 00:13:03,920
 grow the other partition.

276
00:13:03,920 --> 00:13:09,600
 And now we are essentially in a stage where we have the disk

277
00:13:09,600 --> 00:13:10,680
 almost ready to use.

278
00:13:10,680 --> 00:13:12,280
 It's correctly partitioned.

279
00:13:12,280 --> 00:13:15,800
 We have one giant Windows partition, an MBR partition

280
00:13:15,800 --> 00:13:20,280
 table for Windows, and all is well.

281
00:13:20,280 --> 00:13:23,320
 Well, this is not really a bootable system yet, right?

282
00:13:23,320 --> 00:13:27,480
 So if you just drop some files on a partition, your computer

283
00:13:27,480 --> 00:13:29,960
 will be like, oh, that's fine, but I don't know

284
00:13:29,960 --> 00:13:31,440
 how to run this.

285
00:13:31,440 --> 00:13:34,000
 So how does this usually work with Windows?

286
00:13:34,000 --> 00:13:40,800
 So we have the modern day, the UEFI way, and the legacy way.

287
00:13:40,800 --> 00:13:43,920
 Somehow the firmware of your main board runs, or your

288
00:13:43,920 --> 00:13:47,720
 system runs, and we need to somehow load the kernel.

289
00:13:47,720 --> 00:13:49,440
 And how does that happen?

290
00:13:49,440 --> 00:13:53,680
 So with UEFI, it's comparatively easy.

291
00:13:53,680 --> 00:13:56,520
 You have a UEFI partition.

292
00:13:56,520 --> 00:13:57,080
 It's fat.

293
00:13:57,080 --> 00:14:01,560
 There's a PE file on there, this one file.

294
00:14:01,560 --> 00:14:06,320
 It'll get run, and then it loads another load file, and

295
00:14:06,320 --> 00:14:09,720
 then eventually loads some stuff and loads the kernel.

296
00:14:09,720 --> 00:14:13,440
 It references this PCD database, which is boot

297
00:14:13,440 --> 00:14:14,760
 configuration data.

298
00:14:14,760 --> 00:14:20,200
 So it's kind of like a Windows registry hive, but comparable

299
00:14:20,200 --> 00:14:21,360
 to your GRUB config, right?

300
00:14:21,360 --> 00:14:21,960
 There's some--

301
00:14:21,960 --> 00:14:25,520
 if you're in a boot in safe mode, or disable, I don't know,

302
00:14:25,520 --> 00:14:28,800
 certain features like driver signing or boot Windows in

303
00:14:28,800 --> 00:14:32,120
 weird special modes, that is where you would configure that.

304
00:14:32,120 --> 00:14:33,320
 But we're not using that, right?

305
00:14:33,320 --> 00:14:38,040
 We're in a VM, and we don't have UEFI set up.

306
00:14:38,040 --> 00:14:40,040
 It's just a normal VM.

307
00:14:40,040 --> 00:14:42,080
 And we don't have an UEFI partition.

308
00:14:42,080 --> 00:14:44,640
 We just have one giant NTFS partition.

309
00:14:44,640 --> 00:14:46,520
 We want to boot with BIOS.

310
00:14:46,520 --> 00:14:48,120
 How do we do that?

311
00:14:48,120 --> 00:14:50,880
 So you can do this command, so bcdboot.

312
00:14:50,880 --> 00:14:52,040
 This will install a bunch of things.

313
00:14:52,040 --> 00:14:55,440
 It will install the boot manager to disk, and also

314
00:14:55,440 --> 00:15:01,000
 populate the BCD configuration on your Windows partition.

315
00:15:01,000 --> 00:15:05,920
 So we have that set up, and we have another command, bootsect.

316
00:15:05,920 --> 00:15:08,760
 And this will basically set up the earliest stages.

317
00:15:08,760 --> 00:15:12,280
 It will write the MBR, which is at the very beginning of disk.

318
00:15:12,280 --> 00:15:13,400
 It's rather tiny.

319
00:15:13,400 --> 00:15:18,560
 And it will also put secondary loaders into the partition

320
00:15:18,560 --> 00:15:22,280
 itself, the volume boot record, or partition boot record,

321
00:15:22,280 --> 00:15:23,320
 whatever you want to call it.

322
00:15:23,320 --> 00:15:27,240
 But this resides in some free space in the NTFS partition

323
00:15:27,240 --> 00:15:28,200
 that we have.

324
00:15:28,200 --> 00:15:30,400
 And this will get populated by this command.

325
00:15:30,400 --> 00:15:33,640
 And we just call them in our pre-installation environment.

326
00:15:33,640 --> 00:15:36,080
 And then we have a bootable system.

327
00:15:36,080 --> 00:15:40,320
 So we just reboot, and Microsoft calls this the out-of-box

328
00:15:40,320 --> 00:15:41,520
 experience.

329
00:15:41,520 --> 00:15:42,840
 It's the first time you boot.

330
00:15:42,840 --> 00:15:48,480
 The system will reboot a couple of times, do some setup,

331
00:15:48,480 --> 00:15:51,480
 and get you going.

332
00:15:51,480 --> 00:15:55,640
 So now our answer files come into play.

333
00:15:55,640 --> 00:15:59,200
 Usually you have these dialogues.

334
00:15:59,200 --> 00:16:01,600
 We don't want to create an old account, whatever.

335
00:16:01,600 --> 00:16:03,560
 But the answer file bypasses all that.

336
00:16:03,560 --> 00:16:04,680
 We picked a keyboard layout.

337
00:16:04,680 --> 00:16:08,320
 We created a local user, set up a hostname, whatever.

338
00:16:08,320 --> 00:16:11,520
 And at the end, we'll invoke the PowerShell script.

339
00:16:11,520 --> 00:16:14,040
 In the PowerShell script, what can we do?

340
00:16:14,040 --> 00:16:16,160
 Well, just some examples.

341
00:16:16,160 --> 00:16:18,320
 We can configure all the annoying things.

342
00:16:18,320 --> 00:16:22,280
 And it does things as instructed to by the web application.

343
00:16:22,280 --> 00:16:26,360
 So it sources the configuration you put in the browser

344
00:16:26,360 --> 00:16:28,840
 and sets some things up.

345
00:16:28,840 --> 00:16:30,200
 Yeah, there's some links to things.

346
00:16:30,200 --> 00:16:32,240
 You can install software with Chocolatey, whatever.

347
00:16:32,240 --> 00:16:34,680
 And at the end of the day, you'll end up at the desktop.

348
00:16:34,680 --> 00:16:37,520
 This takes about 10 to 15 minutes,

349
00:16:37,520 --> 00:16:39,320
 depending on your internet connection.

350
00:16:39,320 --> 00:16:41,800
 If you have to ISO locally, it's faster.

351
00:16:41,800 --> 00:16:43,680
 If you choose to install updates and it

352
00:16:43,680 --> 00:16:45,240
 has to reboot a bunch of times, it

353
00:16:45,240 --> 00:16:46,920
 can take quite a bit longer.

354
00:16:46,920 --> 00:16:53,040
 But 10, 15 minutes is a good estimate.

355
00:16:53,040 --> 00:16:56,400
 But you don't have to do anything during that time.

356
00:16:56,400 --> 00:17:00,400
 So why is this bootloader crime and a truly cursed install?

357
00:17:00,400 --> 00:17:03,200
 So as mentioned, we're installing Windows 11.

358
00:17:03,200 --> 00:17:06,440
 But we are doing legacy boot.

359
00:17:06,440 --> 00:17:08,280
 We don't have an EFI.

360
00:17:08,280 --> 00:17:09,440
 We don't have Secure Boot.

361
00:17:09,440 --> 00:17:11,400
 We don't even have a TPM, as mentioned.

362
00:17:11,400 --> 00:17:14,000
 It's a classic partition table.

363
00:17:14,000 --> 00:17:18,000
 It's not a GPT partition table.

364
00:17:18,000 --> 00:17:21,240
 We might even not have four gigabytes of RAM,

365
00:17:21,240 --> 00:17:25,440
 which is, I think, the minimum, or a compatible processor.

366
00:17:25,440 --> 00:17:26,400
 Why is that?

367
00:17:26,400 --> 00:17:29,080
 Well, it turns out the project-- it started some time ago.

368
00:17:29,080 --> 00:17:31,640
 And I was trying it with Windows 7.

369
00:17:31,640 --> 00:17:33,560
 And that worked just fine.

370
00:17:33,560 --> 00:17:35,440
 And then I switched it to Windows 11.

371
00:17:35,440 --> 00:17:36,920
 And it continued working.

372
00:17:36,920 --> 00:17:39,040
 And so, OK, that's interesting.

373
00:17:39,040 --> 00:17:40,160
 OK.

374
00:17:40,160 --> 00:17:42,400
 So yeah, some more.

375
00:17:42,400 --> 00:17:45,000
 It seems really the installer enforces a lot of stuff.

376
00:17:45,000 --> 00:17:46,680
 And there's tutorials on how to bypass

377
00:17:46,680 --> 00:17:49,000
 these checks in the installer.

378
00:17:49,000 --> 00:17:50,800
 But we don't even use the installer, right?

379
00:17:50,800 --> 00:17:52,480
 We just boot into a live environment

380
00:17:52,480 --> 00:17:56,440
 and unpack the files normally.

381
00:17:56,440 --> 00:18:02,520
 So yeah, further than-- also, the install media is EFI only.

382
00:18:02,520 --> 00:18:05,520
 So it won't boot on legacy boot.

383
00:18:05,520 --> 00:18:06,360
 But it doesn't matter.

384
00:18:06,360 --> 00:18:07,560
 We use SysLinux and WinBoot.

385
00:18:07,560 --> 00:18:09,320
 So we bypass that.

386
00:18:09,320 --> 00:18:12,680
 And very interestingly, the BootSec tool still has MBR support.

387
00:18:12,680 --> 00:18:15,080
 So I guess-- not entirely sure why,

388
00:18:15,080 --> 00:18:17,760
 but I guess Microsoft is strong on backwards compatibility.

389
00:18:17,760 --> 00:18:19,200
 So they probably left it in.

390
00:18:19,200 --> 00:18:24,840
 It's useful if you want to use Windows 11 tools to maybe repair

391
00:18:24,840 --> 00:18:28,920
 legacy install of an older version.

392
00:18:28,920 --> 00:18:33,560
 And yeah, as far as the whole bootloader chain--

393
00:18:33,560 --> 00:18:37,960
 I mean, the kernel, the handover, it's mostly--

394
00:18:37,960 --> 00:18:41,320
 it seems the format remained compatible in the end.

395
00:18:41,320 --> 00:18:42,840
 It's just a PE file.

396
00:18:42,840 --> 00:18:45,040
 That's massively simplifying it.

397
00:18:45,040 --> 00:18:50,320
 But it seems both boot chains, the legacy and the EFI ones,

398
00:18:50,320 --> 00:18:51,160
 still work.

399
00:18:51,160 --> 00:18:53,080
 So of course, this opens up wild speculations

400
00:18:53,080 --> 00:18:57,680
 that I won't get into here in this talk.

401
00:18:57,680 --> 00:18:58,800
 Surely, some of this--

402
00:18:58,800 --> 00:19:01,040
 parts of this is technical decisions,

403
00:19:01,040 --> 00:19:05,520
 things like secure boot, having a TPM, makes sense.

404
00:19:05,520 --> 00:19:07,720
 If you want to run this in production,

405
00:19:07,720 --> 00:19:09,160
 don't run this in production.

406
00:19:09,160 --> 00:19:11,720
 Run this for a research VM or whatever.

407
00:19:11,720 --> 00:19:13,760
 Maybe some of it was also business decision.

408
00:19:13,760 --> 00:19:21,880
 So there's some future work quickly to get into.

409
00:19:21,880 --> 00:19:24,000
 Need to test this on more hypervisors

410
00:19:24,000 --> 00:19:26,320
 and enhance how you can configure it,

411
00:19:26,320 --> 00:19:28,240
 how you can customize it, maybe allow

412
00:19:28,240 --> 00:19:31,360
 the user to insert some hooks in the web applications

413
00:19:31,360 --> 00:19:34,200
 to do more advanced stuff.

414
00:19:34,200 --> 00:19:37,120
 Also, in theory, you can do this on bare metal.

415
00:19:37,120 --> 00:19:40,680
 You could put it onto some flash drive

416
00:19:40,680 --> 00:19:48,240
 and have it not install on its own block device,

417
00:19:48,240 --> 00:19:51,280
 but on some other block device that's just minor tweaks.

418
00:19:51,280 --> 00:19:54,160
 It would be really cool to make this an even more weird

419
00:19:54,160 --> 00:19:56,960
 install to enable the pre-installation environment

420
00:19:56,960 --> 00:19:57,800
 entirely.

421
00:19:57,800 --> 00:20:01,160
 Either run Dism in Wine, or maybe use even WimLib

422
00:20:01,160 --> 00:20:04,800
 to deploy the files and then figure out

423
00:20:04,800 --> 00:20:07,120
 how to install the boot loaders.

424
00:20:07,120 --> 00:20:10,560
 Maybe also install updates from the pre-installation

425
00:20:10,560 --> 00:20:12,680
 environment so it's quicker.

426
00:20:12,680 --> 00:20:18,000
 Also, maybe even going to UFI and a GPT disk, just MBR disks.

427
00:20:18,000 --> 00:20:19,480
 They have limits in size.

428
00:20:19,480 --> 00:20:22,160
 If you want really large disks for your research VMs,

429
00:20:22,160 --> 00:20:24,080
 you're kind of limited by that right now.

430
00:20:24,080 --> 00:20:26,880
 And yeah, with the bare metal thing,

431
00:20:26,880 --> 00:20:30,160
 find some really obscure hardware to make this run on

432
00:20:30,160 --> 00:20:32,400
 and have some fun with it.

433
00:20:32,400 --> 00:20:33,480
 Yeah, that's it.

434
00:20:33,480 --> 00:20:35,600
 That's the GitHub repo where the code lives.

435
00:20:35,600 --> 00:20:38,320
 And it's not up there right now, but I'll

436
00:20:38,320 --> 00:20:42,440
 be sure to push it later in the day or the following days.

437
00:20:42,440 --> 00:20:47,480
 And yeah, you can hopefully then try it out directly there.

438
00:20:47,480 --> 00:20:50,400
 I'll put a link in to try out the UI online.

439
00:20:50,400 --> 00:20:53,120
 And yeah, if you want to reach me, I'll be around on camp.

440
00:20:53,120 --> 00:20:57,640
 Or you can get all my contact details online.

441
00:20:57,640 --> 00:20:58,560
 That's it.

442
00:20:58,560 --> 00:20:59,520
 Hope you enjoyed it.

443
00:20:59,520 --> 00:21:01,920
 [APPLAUSE]

444
00:21:01,920 --> 00:21:09,520
 Many thanks, Philippe, for this interesting talk.

445
00:21:09,520 --> 00:21:11,760
 Unfortunately, there is no more time for questions left.

446
00:21:11,760 --> 00:21:14,080
 So thank you again.

447
00:21:14,080 --> 00:21:17,440
 [APPLAUSE]

448
00:21:18,200 --> 00:21:21,560
 [MUSIC PLAYING]

449
00:21:21,560 --> 00:21:24,140
 (upbeat music)

